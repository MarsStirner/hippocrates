# -*- encoding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PatientOptionalFields(object):
  DOCTYPE = 0
  DOCSER = 1
  DOCNUM = 2
  SPOLIS = 3
  SMO_OGRN = 4
  SMO_NAM = 5
  SMO_OK = 6
  VNOV_D = 7

  _VALUES_TO_NAMES = {
    0: "DOCTYPE",
    1: "DOCSER",
    2: "DOCNUM",
    3: "SPOLIS",
    4: "SMO_OGRN",
    5: "SMO_NAM",
    6: "SMO_OK",
    7: "VNOV_D",
  }

  _NAMES_TO_VALUES = {
    "DOCTYPE": 0,
    "DOCSER": 1,
    "DOCNUM": 2,
    "SPOLIS": 3,
    "SMO_OGRN": 4,
    "SMO_NAM": 5,
    "SMO_OK": 6,
    "VNOV_D": 7,
  }

class PersonOptionalFields(object):
  SNILS = 0
  MR = 1
  OKATOG = 2
  OKATOP = 3
  FAM_P = 4
  IM_P = 5
  OT_P = 6
  DR_P = 7
  W_P = 8

  _VALUES_TO_NAMES = {
    0: "SNILS",
    1: "MR",
    2: "OKATOG",
    3: "OKATOP",
    4: "FAM_P",
    5: "IM_P",
    6: "OT_P",
    7: "DR_P",
    8: "W_P",
  }

  _NAMES_TO_VALUES = {
    "SNILS": 0,
    "MR": 1,
    "OKATOG": 2,
    "OKATOP": 3,
    "FAM_P": 4,
    "IM_P": 5,
    "OT_P": 6,
    "DR_P": 7,
    "W_P": 8,
  }

class SluchOptionalFields(object):
  NPR_MO = 0
  EXTR = 1
  LPU_1 = 2
  PODR = 3
  DET = 4
  DS0 = 5
  DS2 = 6
  CODE_MES1 = 7
  CODE_MES2 = 8
  OPLATA = 9
  OS_SLUCH = 10

  _VALUES_TO_NAMES = {
    0: "NPR_MO",
    1: "EXTR",
    2: "LPU_1",
    3: "PODR",
    4: "DET",
    5: "DS0",
    6: "DS2",
    7: "CODE_MES1",
    8: "CODE_MES2",
    9: "OPLATA",
    10: "OS_SLUCH",
  }

  _NAMES_TO_VALUES = {
    "NPR_MO": 0,
    "EXTR": 1,
    "LPU_1": 2,
    "PODR": 3,
    "DET": 4,
    "DS0": 5,
    "DS2": 6,
    "CODE_MES1": 7,
    "CODE_MES2": 8,
    "OPLATA": 9,
    "OS_SLUCH": 10,
  }


class Spokesman(object):
  """
  Представитель пациента
  @param patientId         1)Идентификатор пациента
  @param FAM_P             2)Фамилия
  @param IM_P              3)Имя
  @param OT_P              4)Отчество
  @param DR_P              5)Дата рождения
  @param W_P               6)Пол

  Attributes:
   - patientId
   - FAM_P
   - IM_P
   - OT_P
   - DR_P
   - W_P
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, None, ), # 1
    (2, TType.STRING, 'FAM_P', None, None, ), # 2
    (3, TType.STRING, 'IM_P', None, None, ), # 3
    (4, TType.STRING, 'OT_P', None, None, ), # 4
    (5, TType.I64, 'DR_P', None, None, ), # 5
    (6, TType.I16, 'W_P', None, None, ), # 6
  )

  def __init__(self, patientId=None, FAM_P=None, IM_P=None, OT_P=None, DR_P=None, W_P=None,):
    self.patientId = patientId
    self.FAM_P = FAM_P
    self.IM_P = IM_P
    self.OT_P = OT_P
    self.DR_P = DR_P
    self.W_P = W_P

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.FAM_P = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.IM_P = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.OT_P = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.DR_P = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.W_P = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Spokesman')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    if self.FAM_P is not None:
      oprot.writeFieldBegin('FAM_P', TType.STRING, 2)
      oprot.writeString(self.FAM_P.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.IM_P is not None:
      oprot.writeFieldBegin('IM_P', TType.STRING, 3)
      oprot.writeString(self.IM_P.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OT_P is not None:
      oprot.writeFieldBegin('OT_P', TType.STRING, 4)
      oprot.writeString(self.OT_P.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DR_P is not None:
      oprot.writeFieldBegin('DR_P', TType.I64, 5)
      oprot.writeI64(self.DR_P)
      oprot.writeFieldEnd()
    if self.W_P is not None:
      oprot.writeFieldBegin('W_P', TType.I16, 6)
      oprot.writeI16(self.W_P)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Person(object):
  """
  Person
  Данные о пациенте
  *****************
  Данные для тега PERS  (Не зависящие от даты оказания услуги)
  *********
  @param patientId     внутренний идентфикатор пациента в БД ЛПУ
  @param FAM       Фамилия пациента
  @param IM        Имя пациента
  @param OT        Отчество пациента
  @param DR        Дата рождения пациента
  @param W         Пол пациента
  @param SNILS     Номер снилс
  @param MR        Место рождения
  @param OKATOP    адрес проживания
  @param OKATOG    адрес регистрации
  @param spokesman         Представитель пациента

  Attributes:
   - patientId
   - FAM
   - IM
   - OT
   - DR
   - W
   - SNILS
   - MR
   - OKATOG
   - OKATOP
   - spokesman
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'patientId', None, -1, ), # 1
    (2, TType.STRING, 'FAM', None, None, ), # 2
    (3, TType.STRING, 'IM', None, None, ), # 3
    (4, TType.STRING, 'OT', None, None, ), # 4
    (5, TType.I64, 'DR', None, None, ), # 5
    (6, TType.I16, 'W', None, None, ), # 6
    (7, TType.STRING, 'SNILS', None, None, ), # 7
    (8, TType.STRING, 'MR', None, None, ), # 8
    (9, TType.STRING, 'OKATOG', None, None, ), # 9
    (10, TType.STRING, 'OKATOP', None, None, ), # 10
    (11, TType.STRUCT, 'spokesman', (Spokesman, Spokesman.thrift_spec), None, ), # 11
  )

  def __init__(self, patientId=thrift_spec[1][4], FAM=None, IM=None, OT=None, DR=None, W=None, SNILS=None, MR=None, OKATOG=None, OKATOP=None, spokesman=None,):
    if patientId is self.thrift_spec[1][4]:
      patientId = -1
    self.patientId = patientId
    self.FAM = FAM
    self.IM = IM
    self.OT = OT
    self.DR = DR
    self.W = W
    self.SNILS = SNILS
    self.MR = MR
    self.OKATOG = OKATOG
    self.OKATOP = OKATOP
    self.spokesman = spokesman

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.FAM = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.IM = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.OT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.DR = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.W = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.SNILS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.MR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.OKATOG = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.OKATOP = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.spokesman = Spokesman()
          self.spokesman.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Person')
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 1)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    if self.FAM is not None:
      oprot.writeFieldBegin('FAM', TType.STRING, 2)
      oprot.writeString(self.FAM.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.IM is not None:
      oprot.writeFieldBegin('IM', TType.STRING, 3)
      oprot.writeString(self.IM.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OT is not None:
      oprot.writeFieldBegin('OT', TType.STRING, 4)
      oprot.writeString(self.OT.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DR is not None:
      oprot.writeFieldBegin('DR', TType.I64, 5)
      oprot.writeI64(self.DR)
      oprot.writeFieldEnd()
    if self.W is not None:
      oprot.writeFieldBegin('W', TType.I16, 6)
      oprot.writeI16(self.W)
      oprot.writeFieldEnd()
    if self.SNILS is not None:
      oprot.writeFieldBegin('SNILS', TType.STRING, 7)
      oprot.writeString(self.SNILS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.MR is not None:
      oprot.writeFieldBegin('MR', TType.STRING, 8)
      oprot.writeString(self.MR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OKATOG is not None:
      oprot.writeFieldBegin('OKATOG', TType.STRING, 9)
      oprot.writeString(self.OKATOG.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OKATOP is not None:
      oprot.writeFieldBegin('OKATOP', TType.STRING, 10)
      oprot.writeString(self.OKATOP.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.spokesman is not None:
      oprot.writeFieldBegin('spokesman', TType.STRUCT, 11)
      self.spokesman.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.patientId is None:
      raise TProtocol.TProtocolException(message='Required field patientId is unset!')
    if self.FAM is None:
      raise TProtocol.TProtocolException(message='Required field FAM is unset!')
    if self.IM is None:
      raise TProtocol.TProtocolException(message='Required field IM is unset!')
    if self.OT is None:
      raise TProtocol.TProtocolException(message='Required field OT is unset!')
    if self.DR is None:
      raise TProtocol.TProtocolException(message='Required field DR is unset!')
    if self.W is None:
      raise TProtocol.TProtocolException(message='Required field W is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Patient(object):
  """
  Patient
  Данные о пациенте
  *****************
  Данные для тега Pacient  (Зависящие от даты оказания услуги)
  *********
  @param patientId     внутренний идентфикатор пациента в БД ЛПУ
  @param NOVOR         Признак новорожденного
  @param DOCTYPE       Тип документа
  @param DOCSER        Серия документа
  @param DOCNUM        Номер документа
  @param VPOLIS        Тип полиса
  @param SPOLIS        Серия полиса
  @param NPOLIS        Номер полиса
  @param SMO           Инфис-код страховщика
  @param SMO_OGRN      ОГРН страховщика
  @param SMO_OK        Код окато страховщика
  @param SMO_NAM       Полное наименование страховщика
  @param VNOV_D    данные о весе ребенка при рождении (в случае оказания помощи маловесным и недоношенным детям)  Client.weight

  Attributes:
   - NOVOR
   - DOCTYPE
   - DOCSER
   - DOCNUM
   - VPOLIS
   - SPOLIS
   - NPOLIS
   - SMO
   - SMO_OGRN
   - SMO_OK
   - SMO_NAM
   - VNOV_D
   - patientId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'NOVOR', None, None, ), # 1
    (2, TType.STRING, 'DOCTYPE', None, None, ), # 2
    (3, TType.STRING, 'DOCSER', None, None, ), # 3
    (4, TType.STRING, 'DOCNUM', None, None, ), # 4
    (5, TType.I16, 'VPOLIS', None, None, ), # 5
    (6, TType.STRING, 'SPOLIS', None, None, ), # 6
    (7, TType.STRING, 'NPOLIS', None, None, ), # 7
    (8, TType.STRING, 'SMO', None, None, ), # 8
    (9, TType.STRING, 'SMO_OGRN', None, None, ), # 9
    (10, TType.STRING, 'SMO_OK', None, None, ), # 10
    (11, TType.STRING, 'SMO_NAM', None, None, ), # 11
    (12, TType.I32, 'VNOV_D', None, None, ), # 12
    (13, TType.I32, 'patientId', None, None, ), # 13
  )

  def __init__(self, NOVOR=None, DOCTYPE=None, DOCSER=None, DOCNUM=None, VPOLIS=None, SPOLIS=None, NPOLIS=None, SMO=None, SMO_OGRN=None, SMO_OK=None, SMO_NAM=None, VNOV_D=None, patientId=None,):
    self.NOVOR = NOVOR
    self.DOCTYPE = DOCTYPE
    self.DOCSER = DOCSER
    self.DOCNUM = DOCNUM
    self.VPOLIS = VPOLIS
    self.SPOLIS = SPOLIS
    self.NPOLIS = NPOLIS
    self.SMO = SMO
    self.SMO_OGRN = SMO_OGRN
    self.SMO_OK = SMO_OK
    self.SMO_NAM = SMO_NAM
    self.VNOV_D = VNOV_D
    self.patientId = patientId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.NOVOR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.DOCTYPE = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.DOCSER = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.DOCNUM = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.VPOLIS = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.SPOLIS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.NPOLIS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.SMO = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.SMO_OGRN = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.SMO_OK = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.SMO_NAM = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.VNOV_D = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.patientId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Patient')
    if self.NOVOR is not None:
      oprot.writeFieldBegin('NOVOR', TType.STRING, 1)
      oprot.writeString(self.NOVOR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOCTYPE is not None:
      oprot.writeFieldBegin('DOCTYPE', TType.STRING, 2)
      oprot.writeString(self.DOCTYPE.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOCSER is not None:
      oprot.writeFieldBegin('DOCSER', TType.STRING, 3)
      oprot.writeString(self.DOCSER.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOCNUM is not None:
      oprot.writeFieldBegin('DOCNUM', TType.STRING, 4)
      oprot.writeString(self.DOCNUM.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.VPOLIS is not None:
      oprot.writeFieldBegin('VPOLIS', TType.I16, 5)
      oprot.writeI16(self.VPOLIS)
      oprot.writeFieldEnd()
    if self.SPOLIS is not None:
      oprot.writeFieldBegin('SPOLIS', TType.STRING, 6)
      oprot.writeString(self.SPOLIS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NPOLIS is not None:
      oprot.writeFieldBegin('NPOLIS', TType.STRING, 7)
      oprot.writeString(self.NPOLIS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SMO is not None:
      oprot.writeFieldBegin('SMO', TType.STRING, 8)
      oprot.writeString(self.SMO.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SMO_OGRN is not None:
      oprot.writeFieldBegin('SMO_OGRN', TType.STRING, 9)
      oprot.writeString(self.SMO_OGRN.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SMO_OK is not None:
      oprot.writeFieldBegin('SMO_OK', TType.STRING, 10)
      oprot.writeString(self.SMO_OK.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SMO_NAM is not None:
      oprot.writeFieldBegin('SMO_NAM', TType.STRING, 11)
      oprot.writeString(self.SMO_NAM.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.VNOV_D is not None:
      oprot.writeFieldBegin('VNOV_D', TType.I32, 12)
      oprot.writeI32(self.VNOV_D)
      oprot.writeFieldEnd()
    if self.patientId is not None:
      oprot.writeFieldBegin('patientId', TType.I32, 13)
      oprot.writeI32(self.patientId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.NOVOR is None:
      raise TProtocol.TProtocolException(message='Required field NOVOR is unset!')
    if self.VPOLIS is None:
      raise TProtocol.TProtocolException(message='Required field VPOLIS is unset!')
    if self.NPOLIS is None:
      raise TProtocol.TProtocolException(message='Required field NPOLIS is unset!')
    if self.SMO is None:
      raise TProtocol.TProtocolException(message='Required field SMO is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Usl(object):
  """
  Attributes:
   - IDSERV
   - CODE_USL
   - KOL_USL
   - TARIF
   - contract_TariffId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'IDSERV', None, -1, ), # 1
    (2, TType.STRING, 'CODE_USL', None, None, ), # 2
    (3, TType.DOUBLE, 'KOL_USL', None, None, ), # 3
    (4, TType.DOUBLE, 'TARIF', None, None, ), # 4
    (5, TType.I32, 'contract_TariffId', None, None, ), # 5
  )

  def __init__(self, IDSERV=thrift_spec[1][4], CODE_USL=None, KOL_USL=None, TARIF=None, contract_TariffId=None,):
    if IDSERV is self.thrift_spec[1][4]:
      IDSERV = -1
    self.IDSERV = IDSERV
    self.CODE_USL = CODE_USL
    self.KOL_USL = KOL_USL
    self.TARIF = TARIF
    self.contract_TariffId = contract_TariffId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.IDSERV = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.CODE_USL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.KOL_USL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.TARIF = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.contract_TariffId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Usl')
    if self.IDSERV is not None:
      oprot.writeFieldBegin('IDSERV', TType.I32, 1)
      oprot.writeI32(self.IDSERV)
      oprot.writeFieldEnd()
    if self.CODE_USL is not None:
      oprot.writeFieldBegin('CODE_USL', TType.STRING, 2)
      oprot.writeString(self.CODE_USL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOL_USL is not None:
      oprot.writeFieldBegin('KOL_USL', TType.DOUBLE, 3)
      oprot.writeDouble(self.KOL_USL)
      oprot.writeFieldEnd()
    if self.TARIF is not None:
      oprot.writeFieldBegin('TARIF', TType.DOUBLE, 4)
      oprot.writeDouble(self.TARIF)
      oprot.writeFieldEnd()
    if self.contract_TariffId is not None:
      oprot.writeFieldBegin('contract_TariffId', TType.I32, 5)
      oprot.writeI32(self.contract_TariffId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.IDSERV is None:
      raise TProtocol.TProtocolException(message='Required field IDSERV is unset!')
    if self.CODE_USL is None:
      raise TProtocol.TProtocolException(message='Required field CODE_USL is unset!')
    if self.KOL_USL is None:
      raise TProtocol.TProtocolException(message='Required field KOL_USL is unset!')
    if self.TARIF is None:
      raise TProtocol.TProtocolException(message='Required field TARIF is unset!')
    if self.contract_TariffId is None:
      raise TProtocol.TProtocolException(message='Required field contract_TariffId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Sluch(object):
  """
  * Sluch
  * Структура с данными о случае оказания мед помощи
  * *******
  * @param IDCASE    Идентификатор выставленной позиции счета
  * @param USL_OK
  * @param VIDPOM
  * @param NPR_MO
  * @param EXTR
  * @param FOR_POM
         Данные о форме оказания помощи  (Event.order -> rbAppointmentOrder.id -> rbAppointmentOrder.TFOMScode_account)
                         Возможные значения:
                         1-плановая;
                         2-экстренная;
                         3-неотложная.
  * @param LPU
  * @param LPU_1
  * @param PODR
  * @param PROFIL
  * @param DET
  * @param NHISTORY
  * @param DATE_1
  * @param DATE_2
  * @param DS0
  * @param DS1
  * @param DS2
  * @param CODE_MES1
  * @param CODE_MES2
  * @param RSLT
  * @param ISHOD
  * @param PRVS
  * @param IDDOKT
  * @param OS_SLUCH
  * @param IDSP
  * @param
  * *******

  Attributes:
   - IDCASE
   - USL_OK
   - VIDPOM
   - NPR_MO
   - EXTR
   - FOR_POM
   - LPU
   - LPU_1
   - PODR
   - PROFIL
   - DET
   - NHISTORY
   - DATE_1
   - DATE_2
   - DS0
   - DS1
   - DS2
   - CODE_MES1
   - CODE_MES2
   - RSLT
   - ISHOD
   - PRVS
   - IDDOKT
   - OS_SLUCH
   - IDSP
   - patient
   - ED_COL
   - SUMV
   - USL
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'IDCASE', None, None, ), # 1
    (2, TType.I16, 'USL_OK', None, None, ), # 2
    (3, TType.I16, 'VIDPOM', None, None, ), # 3
    (4, TType.STRING, 'NPR_MO', None, None, ), # 4
    (5, TType.I16, 'EXTR', None, None, ), # 5
    (6, TType.I16, 'FOR_POM', None, None, ), # 6
    (7, TType.STRING, 'LPU', None, None, ), # 7
    (8, TType.STRING, 'LPU_1', None, None, ), # 8
    (9, TType.STRING, 'PODR', None, None, ), # 9
    (10, TType.I16, 'PROFIL', None, None, ), # 10
    (11, TType.BOOL, 'DET', None, None, ), # 11
    (12, TType.STRING, 'NHISTORY', None, None, ), # 12
    (13, TType.I64, 'DATE_1', None, None, ), # 13
    (14, TType.I64, 'DATE_2', None, None, ), # 14
    (15, TType.STRING, 'DS0', None, None, ), # 15
    (16, TType.STRING, 'DS1', None, None, ), # 16
    (17, TType.STRING, 'DS2', None, None, ), # 17
    (18, TType.STRING, 'CODE_MES1', None, None, ), # 18
    (19, TType.STRING, 'CODE_MES2', None, None, ), # 19
    (20, TType.I16, 'RSLT', None, None, ), # 20
    (21, TType.I16, 'ISHOD', None, None, ), # 21
    (22, TType.I32, 'PRVS', None, -1, ), # 22
    (23, TType.STRING, 'IDDOKT', None, "", ), # 23
    (24, TType.LIST, 'OS_SLUCH', (TType.I32,None), None, ), # 24
    (25, TType.I16, 'IDSP', None, None, ), # 25
    (26, TType.STRUCT, 'patient', (Patient, Patient.thrift_spec), None, ), # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.DOUBLE, 'ED_COL', None, None, ), # 30
    (31, TType.DOUBLE, 'SUMV', None, None, ), # 31
    (32, TType.LIST, 'USL', (TType.STRUCT,(Usl, Usl.thrift_spec)), None, ), # 32
  )

  def __init__(self, IDCASE=None, USL_OK=None, VIDPOM=None, NPR_MO=None, EXTR=None, FOR_POM=None, LPU=None, LPU_1=None, PODR=None, PROFIL=None, DET=None, NHISTORY=None, DATE_1=None, DATE_2=None, DS0=None, DS1=None, DS2=None, CODE_MES1=None, CODE_MES2=None, RSLT=None, ISHOD=None, PRVS=thrift_spec[22][4], IDDOKT=thrift_spec[23][4], OS_SLUCH=None, IDSP=None, patient=None, ED_COL=None, SUMV=None, USL=None,):
    self.IDCASE = IDCASE
    self.USL_OK = USL_OK
    self.VIDPOM = VIDPOM
    self.NPR_MO = NPR_MO
    self.EXTR = EXTR
    self.FOR_POM = FOR_POM
    self.LPU = LPU
    self.LPU_1 = LPU_1
    self.PODR = PODR
    self.PROFIL = PROFIL
    self.DET = DET
    self.NHISTORY = NHISTORY
    self.DATE_1 = DATE_1
    self.DATE_2 = DATE_2
    self.DS0 = DS0
    self.DS1 = DS1
    self.DS2 = DS2
    self.CODE_MES1 = CODE_MES1
    self.CODE_MES2 = CODE_MES2
    self.RSLT = RSLT
    self.ISHOD = ISHOD
    if PRVS is self.thrift_spec[22][4]:
      PRVS = -1
    self.PRVS = PRVS
    self.IDDOKT = IDDOKT
    self.OS_SLUCH = OS_SLUCH
    self.IDSP = IDSP
    self.patient = patient
    self.ED_COL = ED_COL
    self.SUMV = SUMV
    self.USL = USL

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.IDCASE = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.USL_OK = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.VIDPOM = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.NPR_MO = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.EXTR = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.FOR_POM = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.LPU = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.LPU_1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.PODR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.PROFIL = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.DET = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.NHISTORY = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.DATE_1 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.DATE_2 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.DS0 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.DS1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.DS2 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.CODE_MES1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.CODE_MES2 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I16:
          self.RSLT = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I16:
          self.ISHOD = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.PRVS = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.IDDOKT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.LIST:
          self.OS_SLUCH = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.OS_SLUCH.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I16:
          self.IDSP = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRUCT:
          self.patient = Patient()
          self.patient.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.ED_COL = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.SUMV = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.LIST:
          self.USL = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = Usl()
            _elem11.read(iprot)
            self.USL.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Sluch')
    if self.IDCASE is not None:
      oprot.writeFieldBegin('IDCASE', TType.I32, 1)
      oprot.writeI32(self.IDCASE)
      oprot.writeFieldEnd()
    if self.USL_OK is not None:
      oprot.writeFieldBegin('USL_OK', TType.I16, 2)
      oprot.writeI16(self.USL_OK)
      oprot.writeFieldEnd()
    if self.VIDPOM is not None:
      oprot.writeFieldBegin('VIDPOM', TType.I16, 3)
      oprot.writeI16(self.VIDPOM)
      oprot.writeFieldEnd()
    if self.NPR_MO is not None:
      oprot.writeFieldBegin('NPR_MO', TType.STRING, 4)
      oprot.writeString(self.NPR_MO.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.EXTR is not None:
      oprot.writeFieldBegin('EXTR', TType.I16, 5)
      oprot.writeI16(self.EXTR)
      oprot.writeFieldEnd()
    if self.FOR_POM is not None:
      oprot.writeFieldBegin('FOR_POM', TType.I16, 6)
      oprot.writeI16(self.FOR_POM)
      oprot.writeFieldEnd()
    if self.LPU is not None:
      oprot.writeFieldBegin('LPU', TType.STRING, 7)
      oprot.writeString(self.LPU.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.LPU_1 is not None:
      oprot.writeFieldBegin('LPU_1', TType.STRING, 8)
      oprot.writeString(self.LPU_1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.PODR is not None:
      oprot.writeFieldBegin('PODR', TType.STRING, 9)
      oprot.writeString(self.PODR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.PROFIL is not None:
      oprot.writeFieldBegin('PROFIL', TType.I16, 10)
      oprot.writeI16(self.PROFIL)
      oprot.writeFieldEnd()
    if self.DET is not None:
      oprot.writeFieldBegin('DET', TType.BOOL, 11)
      oprot.writeBool(self.DET)
      oprot.writeFieldEnd()
    if self.NHISTORY is not None:
      oprot.writeFieldBegin('NHISTORY', TType.STRING, 12)
      oprot.writeString(self.NHISTORY.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DATE_1 is not None:
      oprot.writeFieldBegin('DATE_1', TType.I64, 13)
      oprot.writeI64(self.DATE_1)
      oprot.writeFieldEnd()
    if self.DATE_2 is not None:
      oprot.writeFieldBegin('DATE_2', TType.I64, 14)
      oprot.writeI64(self.DATE_2)
      oprot.writeFieldEnd()
    if self.DS0 is not None:
      oprot.writeFieldBegin('DS0', TType.STRING, 15)
      oprot.writeString(self.DS0.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DS1 is not None:
      oprot.writeFieldBegin('DS1', TType.STRING, 16)
      oprot.writeString(self.DS1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DS2 is not None:
      oprot.writeFieldBegin('DS2', TType.STRING, 17)
      oprot.writeString(self.DS2.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.CODE_MES1 is not None:
      oprot.writeFieldBegin('CODE_MES1', TType.STRING, 18)
      oprot.writeString(self.CODE_MES1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.CODE_MES2 is not None:
      oprot.writeFieldBegin('CODE_MES2', TType.STRING, 19)
      oprot.writeString(self.CODE_MES2.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.RSLT is not None:
      oprot.writeFieldBegin('RSLT', TType.I16, 20)
      oprot.writeI16(self.RSLT)
      oprot.writeFieldEnd()
    if self.ISHOD is not None:
      oprot.writeFieldBegin('ISHOD', TType.I16, 21)
      oprot.writeI16(self.ISHOD)
      oprot.writeFieldEnd()
    if self.PRVS is not None:
      oprot.writeFieldBegin('PRVS', TType.I32, 22)
      oprot.writeI32(self.PRVS)
      oprot.writeFieldEnd()
    if self.IDDOKT is not None:
      oprot.writeFieldBegin('IDDOKT', TType.STRING, 23)
      oprot.writeString(self.IDDOKT.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OS_SLUCH is not None:
      oprot.writeFieldBegin('OS_SLUCH', TType.LIST, 24)
      oprot.writeListBegin(TType.I32, len(self.OS_SLUCH))
      for iter12 in self.OS_SLUCH:
        oprot.writeI32(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.IDSP is not None:
      oprot.writeFieldBegin('IDSP', TType.I16, 25)
      oprot.writeI16(self.IDSP)
      oprot.writeFieldEnd()
    if self.patient is not None:
      oprot.writeFieldBegin('patient', TType.STRUCT, 26)
      self.patient.write(oprot)
      oprot.writeFieldEnd()
    if self.ED_COL is not None:
      oprot.writeFieldBegin('ED_COL', TType.DOUBLE, 30)
      oprot.writeDouble(self.ED_COL)
      oprot.writeFieldEnd()
    if self.SUMV is not None:
      oprot.writeFieldBegin('SUMV', TType.DOUBLE, 31)
      oprot.writeDouble(self.SUMV)
      oprot.writeFieldEnd()
    if self.USL is not None:
      oprot.writeFieldBegin('USL', TType.LIST, 32)
      oprot.writeListBegin(TType.STRUCT, len(self.USL))
      for iter13 in self.USL:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.IDCASE is None:
      raise TProtocol.TProtocolException(message='Required field IDCASE is unset!')
    if self.USL_OK is None:
      raise TProtocol.TProtocolException(message='Required field USL_OK is unset!')
    if self.VIDPOM is None:
      raise TProtocol.TProtocolException(message='Required field VIDPOM is unset!')
    if self.FOR_POM is None:
      raise TProtocol.TProtocolException(message='Required field FOR_POM is unset!')
    if self.LPU is None:
      raise TProtocol.TProtocolException(message='Required field LPU is unset!')
    if self.PROFIL is None:
      raise TProtocol.TProtocolException(message='Required field PROFIL is unset!')
    if self.NHISTORY is None:
      raise TProtocol.TProtocolException(message='Required field NHISTORY is unset!')
    if self.DATE_1 is None:
      raise TProtocol.TProtocolException(message='Required field DATE_1 is unset!')
    if self.DATE_2 is None:
      raise TProtocol.TProtocolException(message='Required field DATE_2 is unset!')
    if self.RSLT is None:
      raise TProtocol.TProtocolException(message='Required field RSLT is unset!')
    if self.ISHOD is None:
      raise TProtocol.TProtocolException(message='Required field ISHOD is unset!')
    if self.PRVS is None:
      raise TProtocol.TProtocolException(message='Required field PRVS is unset!')
    if self.IDDOKT is None:
      raise TProtocol.TProtocolException(message='Required field IDDOKT is unset!')
    if self.IDSP is None:
      raise TProtocol.TProtocolException(message='Required field IDSP is unset!')
    if self.patient is None:
      raise TProtocol.TProtocolException(message='Required field patient is unset!')
    if self.ED_COL is None:
      raise TProtocol.TProtocolException(message='Required field ED_COL is unset!')
    if self.SUMV is None:
      raise TProtocol.TProtocolException(message='Required field SUMV is unset!')
    if self.USL is None:
      raise TProtocol.TProtocolException(message='Required field USL is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TClientPolicy(object):
  """
  Attributes:
   - serial
   - number
   - policyTypeCode
   - begDate
   - endDate
   - insurerInfisCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serial', None, None, ), # 1
    (2, TType.STRING, 'number', None, None, ), # 2
    (3, TType.I16, 'policyTypeCode', None, None, ), # 3
    (4, TType.I64, 'begDate', None, None, ), # 4
    (5, TType.I64, 'endDate', None, None, ), # 5
    (6, TType.STRING, 'insurerInfisCode', None, None, ), # 6
  )

  def __init__(self, serial=None, number=None, policyTypeCode=None, begDate=None, endDate=None, insurerInfisCode=None,):
    self.serial = serial
    self.number = number
    self.policyTypeCode = policyTypeCode
    self.begDate = begDate
    self.endDate = endDate
    self.insurerInfisCode = insurerInfisCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serial = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.number = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.policyTypeCode = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.begDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.insurerInfisCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TClientPolicy')
    if self.serial is not None:
      oprot.writeFieldBegin('serial', TType.STRING, 1)
      oprot.writeString(self.serial.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.number is not None:
      oprot.writeFieldBegin('number', TType.STRING, 2)
      oprot.writeString(self.number.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.policyTypeCode is not None:
      oprot.writeFieldBegin('policyTypeCode', TType.I16, 3)
      oprot.writeI16(self.policyTypeCode)
      oprot.writeFieldEnd()
    if self.begDate is not None:
      oprot.writeFieldBegin('begDate', TType.I64, 4)
      oprot.writeI64(self.begDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 5)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.insurerInfisCode is not None:
      oprot.writeFieldBegin('insurerInfisCode', TType.STRING, 6)
      oprot.writeString(self.insurerInfisCode.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.serial is None:
      raise TProtocol.TProtocolException(message='Required field serial is unset!')
    if self.number is None:
      raise TProtocol.TProtocolException(message='Required field number is unset!')
    if self.policyTypeCode is None:
      raise TProtocol.TProtocolException(message='Required field policyTypeCode is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DBFStationary(object):
  """
  Attributes:
   - DAT_VV
   - DAT_PR
   - SER_POL
   - NOM_POL
   - FAMIL
   - IMYA
   - OT
   - KOD_F
   - POL
   - D_R
   - RAION
   - KOD_T
   - NAS_P
   - UL
   - DOM
   - KV
   - KATEGOR
   - MES_R
   - KOD_PR
   - OTD
   - N_KART
   - DIA_O
   - DOP_D
   - DIA_S
   - DOP_S
   - DIA_S1
   - DOP_S1
   - OSL
   - DOP_OSL
   - KSG_MS
   - DL_LEC
   - SL
   - ISH_LEC
   - PR_NZ
   - STOIM
   - KOD_VR
   - KOD_O
   - N_OPER
   - KOL_USL
   - Tarif
   - KOD_TSK
   - NAMCMO
   - KOD_DOK
   - SER_DOK
   - NOM_DOK
   - VMP
   - DAT_BLVN
   - DAT_ELVN
   - DAMAGE
   - DATA_NS
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'DAT_VV', None, 0, ), # 1
    (2, TType.I64, 'DAT_PR', None, 0, ), # 2
    (3, TType.STRING, 'SER_POL', None, "", ), # 3
    (4, TType.STRING, 'NOM_POL', None, "", ), # 4
    (5, TType.STRING, 'FAMIL', None, "", ), # 5
    (6, TType.STRING, 'IMYA', None, "", ), # 6
    (7, TType.STRING, 'OT', None, "", ), # 7
    (8, TType.STRING, 'KOD_F', None, "", ), # 8
    (9, TType.STRING, 'POL', None, "Н", ), # 9
    (10, TType.I64, 'D_R', None, 0, ), # 10
    (11, TType.I16, 'RAION', None, 0, ), # 11
    (12, TType.I16, 'KOD_T', None, 0, ), # 12
    (13, TType.STRING, 'NAS_P', None, "", ), # 13
    (14, TType.STRING, 'UL', None, "", ), # 14
    (15, TType.STRING, 'DOM', None, "", ), # 15
    (16, TType.STRING, 'KV', None, "", ), # 16
    (17, TType.I16, 'KATEGOR', None, 2, ), # 17
    (18, TType.STRING, 'MES_R', None, "Неработающий", ), # 18
    (19, TType.STRING, 'KOD_PR', None, "Не заполняется", ), # 19
    (20, TType.I16, 'OTD', None, 0, ), # 20
    (21, TType.STRING, 'N_KART', None, "", ), # 21
    (22, TType.STRING, 'DIA_O', None, "", ), # 22
    (23, TType.STRING, 'DOP_D', None, "", ), # 23
    (24, TType.STRING, 'DIA_S', None, "", ), # 24
    (25, TType.STRING, 'DOP_S', None, "", ), # 25
    (26, TType.STRING, 'DIA_S1', None, "", ), # 26
    (27, TType.STRING, 'DOP_S1', None, "", ), # 27
    (28, TType.STRING, 'OSL', None, "", ), # 28
    (29, TType.STRING, 'DOP_OSL', None, "", ), # 29
    (30, TType.STRING, 'KSG_MS', None, "", ), # 30
    (31, TType.I16, 'DL_LEC', None, 0, ), # 31
    (32, TType.I16, 'SL', None, 0, ), # 32
    (33, TType.I16, 'ISH_LEC', None, 0, ), # 33
    (34, TType.I16, 'PR_NZ', None, 0, ), # 34
    (35, TType.DOUBLE, 'STOIM', None, 0, ), # 35
    (36, TType.STRING, 'KOD_VR', None, "", ), # 36
    (37, TType.STRING, 'KOD_O', None, "Не заполняется", ), # 37
    (38, TType.STRING, 'N_OPER', None, "Не заполняется", ), # 38
    (39, TType.I32, 'KOL_USL', None, 0, ), # 39
    (40, TType.DOUBLE, 'Tarif', None, 0, ), # 40
    (41, TType.I32, 'KOD_TSK', None, 0, ), # 41
    (42, TType.STRING, 'NAMCMO', None, "", ), # 42
    (43, TType.I16, 'KOD_DOK', None, 0, ), # 43
    (44, TType.STRING, 'SER_DOK', None, "", ), # 44
    (45, TType.STRING, 'NOM_DOK', None, "", ), # 45
    (46, TType.I16, 'VMP', None, 0, ), # 46
    (47, TType.I64, 'DAT_BLVN', None, 0, ), # 47
    (48, TType.I64, 'DAT_ELVN', None, 0, ), # 48
    (49, TType.BOOL, 'DAMAGE', None, False, ), # 49
    (50, TType.I64, 'DATA_NS', None, 0, ), # 50
  )

  def __init__(self, DAT_VV=thrift_spec[1][4], DAT_PR=thrift_spec[2][4], SER_POL=thrift_spec[3][4], NOM_POL=thrift_spec[4][4], FAMIL=thrift_spec[5][4], IMYA=thrift_spec[6][4], OT=thrift_spec[7][4], KOD_F=thrift_spec[8][4], POL=thrift_spec[9][4], D_R=thrift_spec[10][4], RAION=thrift_spec[11][4], KOD_T=thrift_spec[12][4], NAS_P=thrift_spec[13][4], UL=thrift_spec[14][4], DOM=thrift_spec[15][4], KV=thrift_spec[16][4], KATEGOR=thrift_spec[17][4], MES_R=thrift_spec[18][4], KOD_PR=thrift_spec[19][4], OTD=thrift_spec[20][4], N_KART=thrift_spec[21][4], DIA_O=thrift_spec[22][4], DOP_D=thrift_spec[23][4], DIA_S=thrift_spec[24][4], DOP_S=thrift_spec[25][4], DIA_S1=thrift_spec[26][4], DOP_S1=thrift_spec[27][4], OSL=thrift_spec[28][4], DOP_OSL=thrift_spec[29][4], KSG_MS=thrift_spec[30][4], DL_LEC=thrift_spec[31][4], SL=thrift_spec[32][4], ISH_LEC=thrift_spec[33][4], PR_NZ=thrift_spec[34][4], STOIM=thrift_spec[35][4], KOD_VR=thrift_spec[36][4], KOD_O=thrift_spec[37][4], N_OPER=thrift_spec[38][4], KOL_USL=thrift_spec[39][4], Tarif=thrift_spec[40][4], KOD_TSK=thrift_spec[41][4], NAMCMO=thrift_spec[42][4], KOD_DOK=thrift_spec[43][4], SER_DOK=thrift_spec[44][4], NOM_DOK=thrift_spec[45][4], VMP=thrift_spec[46][4], DAT_BLVN=thrift_spec[47][4], DAT_ELVN=thrift_spec[48][4], DAMAGE=thrift_spec[49][4], DATA_NS=thrift_spec[50][4],):
    if DAT_VV is self.thrift_spec[1][4]:
      DAT_VV = 0
    self.DAT_VV = DAT_VV
    if DAT_PR is self.thrift_spec[2][4]:
      DAT_PR = 0
    self.DAT_PR = DAT_PR
    self.SER_POL = SER_POL
    self.NOM_POL = NOM_POL
    self.FAMIL = FAMIL
    self.IMYA = IMYA
    self.OT = OT
    self.KOD_F = KOD_F
    self.POL = POL
    if D_R is self.thrift_spec[10][4]:
      D_R = 0
    self.D_R = D_R
    if RAION is self.thrift_spec[11][4]:
      RAION = 0
    self.RAION = RAION
    if KOD_T is self.thrift_spec[12][4]:
      KOD_T = 0
    self.KOD_T = KOD_T
    self.NAS_P = NAS_P
    self.UL = UL
    self.DOM = DOM
    self.KV = KV
    if KATEGOR is self.thrift_spec[17][4]:
      KATEGOR = 2
    self.KATEGOR = KATEGOR
    self.MES_R = MES_R
    self.KOD_PR = KOD_PR
    if OTD is self.thrift_spec[20][4]:
      OTD = 0
    self.OTD = OTD
    self.N_KART = N_KART
    self.DIA_O = DIA_O
    self.DOP_D = DOP_D
    self.DIA_S = DIA_S
    self.DOP_S = DOP_S
    self.DIA_S1 = DIA_S1
    self.DOP_S1 = DOP_S1
    self.OSL = OSL
    self.DOP_OSL = DOP_OSL
    self.KSG_MS = KSG_MS
    if DL_LEC is self.thrift_spec[31][4]:
      DL_LEC = 0
    self.DL_LEC = DL_LEC
    if SL is self.thrift_spec[32][4]:
      SL = 0
    self.SL = SL
    if ISH_LEC is self.thrift_spec[33][4]:
      ISH_LEC = 0
    self.ISH_LEC = ISH_LEC
    if PR_NZ is self.thrift_spec[34][4]:
      PR_NZ = 0
    self.PR_NZ = PR_NZ
    self.STOIM = STOIM
    self.KOD_VR = KOD_VR
    self.KOD_O = KOD_O
    self.N_OPER = N_OPER
    if KOL_USL is self.thrift_spec[39][4]:
      KOL_USL = 0
    self.KOL_USL = KOL_USL
    self.Tarif = Tarif
    if KOD_TSK is self.thrift_spec[41][4]:
      KOD_TSK = 0
    self.KOD_TSK = KOD_TSK
    self.NAMCMO = NAMCMO
    if KOD_DOK is self.thrift_spec[43][4]:
      KOD_DOK = 0
    self.KOD_DOK = KOD_DOK
    self.SER_DOK = SER_DOK
    self.NOM_DOK = NOM_DOK
    if VMP is self.thrift_spec[46][4]:
      VMP = 0
    self.VMP = VMP
    if DAT_BLVN is self.thrift_spec[47][4]:
      DAT_BLVN = 0
    self.DAT_BLVN = DAT_BLVN
    if DAT_ELVN is self.thrift_spec[48][4]:
      DAT_ELVN = 0
    self.DAT_ELVN = DAT_ELVN
    self.DAMAGE = DAMAGE
    if DATA_NS is self.thrift_spec[50][4]:
      DATA_NS = 0
    self.DATA_NS = DATA_NS

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.DAT_VV = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.DAT_PR = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.SER_POL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.NOM_POL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.FAMIL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.IMYA = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.OT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.KOD_F = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.POL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.D_R = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.RAION = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.KOD_T = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.NAS_P = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.UL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.DOM = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.KV = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I16:
          self.KATEGOR = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.MES_R = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.KOD_PR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I16:
          self.OTD = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.N_KART = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.DIA_O = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.DOP_D = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.DIA_S = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.DOP_S = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.DIA_S1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.DOP_S1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.OSL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.DOP_OSL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.KSG_MS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I16:
          self.DL_LEC = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I16:
          self.SL = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I16:
          self.ISH_LEC = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I16:
          self.PR_NZ = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.DOUBLE:
          self.STOIM = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.KOD_VR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRING:
          self.KOD_O = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.N_OPER = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.KOL_USL = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.DOUBLE:
          self.Tarif = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I32:
          self.KOD_TSK = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.NAMCMO = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I16:
          self.KOD_DOK = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.STRING:
          self.SER_DOK = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRING:
          self.NOM_DOK = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I16:
          self.VMP = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I64:
          self.DAT_BLVN = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I64:
          self.DAT_ELVN = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.BOOL:
          self.DAMAGE = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I64:
          self.DATA_NS = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DBFStationary')
    if self.DAT_VV is not None:
      oprot.writeFieldBegin('DAT_VV', TType.I64, 1)
      oprot.writeI64(self.DAT_VV)
      oprot.writeFieldEnd()
    if self.DAT_PR is not None:
      oprot.writeFieldBegin('DAT_PR', TType.I64, 2)
      oprot.writeI64(self.DAT_PR)
      oprot.writeFieldEnd()
    if self.SER_POL is not None:
      oprot.writeFieldBegin('SER_POL', TType.STRING, 3)
      oprot.writeString(self.SER_POL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NOM_POL is not None:
      oprot.writeFieldBegin('NOM_POL', TType.STRING, 4)
      oprot.writeString(self.NOM_POL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.FAMIL is not None:
      oprot.writeFieldBegin('FAMIL', TType.STRING, 5)
      oprot.writeString(self.FAMIL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.IMYA is not None:
      oprot.writeFieldBegin('IMYA', TType.STRING, 6)
      oprot.writeString(self.IMYA.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OT is not None:
      oprot.writeFieldBegin('OT', TType.STRING, 7)
      oprot.writeString(self.OT.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOD_F is not None:
      oprot.writeFieldBegin('KOD_F', TType.STRING, 8)
      oprot.writeString(self.KOD_F.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.POL is not None:
      oprot.writeFieldBegin('POL', TType.STRING, 9)
      oprot.writeString(self.POL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.D_R is not None:
      oprot.writeFieldBegin('D_R', TType.I64, 10)
      oprot.writeI64(self.D_R)
      oprot.writeFieldEnd()
    if self.RAION is not None:
      oprot.writeFieldBegin('RAION', TType.I16, 11)
      oprot.writeI16(self.RAION)
      oprot.writeFieldEnd()
    if self.KOD_T is not None:
      oprot.writeFieldBegin('KOD_T', TType.I16, 12)
      oprot.writeI16(self.KOD_T)
      oprot.writeFieldEnd()
    if self.NAS_P is not None:
      oprot.writeFieldBegin('NAS_P', TType.STRING, 13)
      oprot.writeString(self.NAS_P.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.UL is not None:
      oprot.writeFieldBegin('UL', TType.STRING, 14)
      oprot.writeString(self.UL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOM is not None:
      oprot.writeFieldBegin('DOM', TType.STRING, 15)
      oprot.writeString(self.DOM.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KV is not None:
      oprot.writeFieldBegin('KV', TType.STRING, 16)
      oprot.writeString(self.KV.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KATEGOR is not None:
      oprot.writeFieldBegin('KATEGOR', TType.I16, 17)
      oprot.writeI16(self.KATEGOR)
      oprot.writeFieldEnd()
    if self.MES_R is not None:
      oprot.writeFieldBegin('MES_R', TType.STRING, 18)
      oprot.writeString(self.MES_R.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOD_PR is not None:
      oprot.writeFieldBegin('KOD_PR', TType.STRING, 19)
      oprot.writeString(self.KOD_PR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OTD is not None:
      oprot.writeFieldBegin('OTD', TType.I16, 20)
      oprot.writeI16(self.OTD)
      oprot.writeFieldEnd()
    if self.N_KART is not None:
      oprot.writeFieldBegin('N_KART', TType.STRING, 21)
      oprot.writeString(self.N_KART.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DIA_O is not None:
      oprot.writeFieldBegin('DIA_O', TType.STRING, 22)
      oprot.writeString(self.DIA_O.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOP_D is not None:
      oprot.writeFieldBegin('DOP_D', TType.STRING, 23)
      oprot.writeString(self.DOP_D.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DIA_S is not None:
      oprot.writeFieldBegin('DIA_S', TType.STRING, 24)
      oprot.writeString(self.DIA_S.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOP_S is not None:
      oprot.writeFieldBegin('DOP_S', TType.STRING, 25)
      oprot.writeString(self.DOP_S.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DIA_S1 is not None:
      oprot.writeFieldBegin('DIA_S1', TType.STRING, 26)
      oprot.writeString(self.DIA_S1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOP_S1 is not None:
      oprot.writeFieldBegin('DOP_S1', TType.STRING, 27)
      oprot.writeString(self.DOP_S1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OSL is not None:
      oprot.writeFieldBegin('OSL', TType.STRING, 28)
      oprot.writeString(self.OSL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOP_OSL is not None:
      oprot.writeFieldBegin('DOP_OSL', TType.STRING, 29)
      oprot.writeString(self.DOP_OSL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KSG_MS is not None:
      oprot.writeFieldBegin('KSG_MS', TType.STRING, 30)
      oprot.writeString(self.KSG_MS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DL_LEC is not None:
      oprot.writeFieldBegin('DL_LEC', TType.I16, 31)
      oprot.writeI16(self.DL_LEC)
      oprot.writeFieldEnd()
    if self.SL is not None:
      oprot.writeFieldBegin('SL', TType.I16, 32)
      oprot.writeI16(self.SL)
      oprot.writeFieldEnd()
    if self.ISH_LEC is not None:
      oprot.writeFieldBegin('ISH_LEC', TType.I16, 33)
      oprot.writeI16(self.ISH_LEC)
      oprot.writeFieldEnd()
    if self.PR_NZ is not None:
      oprot.writeFieldBegin('PR_NZ', TType.I16, 34)
      oprot.writeI16(self.PR_NZ)
      oprot.writeFieldEnd()
    if self.STOIM is not None:
      oprot.writeFieldBegin('STOIM', TType.DOUBLE, 35)
      oprot.writeDouble(self.STOIM)
      oprot.writeFieldEnd()
    if self.KOD_VR is not None:
      oprot.writeFieldBegin('KOD_VR', TType.STRING, 36)
      oprot.writeString(self.KOD_VR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOD_O is not None:
      oprot.writeFieldBegin('KOD_O', TType.STRING, 37)
      oprot.writeString(self.KOD_O.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.N_OPER is not None:
      oprot.writeFieldBegin('N_OPER', TType.STRING, 38)
      oprot.writeString(self.N_OPER.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOL_USL is not None:
      oprot.writeFieldBegin('KOL_USL', TType.I32, 39)
      oprot.writeI32(self.KOL_USL)
      oprot.writeFieldEnd()
    if self.Tarif is not None:
      oprot.writeFieldBegin('Tarif', TType.DOUBLE, 40)
      oprot.writeDouble(self.Tarif)
      oprot.writeFieldEnd()
    if self.KOD_TSK is not None:
      oprot.writeFieldBegin('KOD_TSK', TType.I32, 41)
      oprot.writeI32(self.KOD_TSK)
      oprot.writeFieldEnd()
    if self.NAMCMO is not None:
      oprot.writeFieldBegin('NAMCMO', TType.STRING, 42)
      oprot.writeString(self.NAMCMO.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOD_DOK is not None:
      oprot.writeFieldBegin('KOD_DOK', TType.I16, 43)
      oprot.writeI16(self.KOD_DOK)
      oprot.writeFieldEnd()
    if self.SER_DOK is not None:
      oprot.writeFieldBegin('SER_DOK', TType.STRING, 44)
      oprot.writeString(self.SER_DOK.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NOM_DOK is not None:
      oprot.writeFieldBegin('NOM_DOK', TType.STRING, 45)
      oprot.writeString(self.NOM_DOK.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.VMP is not None:
      oprot.writeFieldBegin('VMP', TType.I16, 46)
      oprot.writeI16(self.VMP)
      oprot.writeFieldEnd()
    if self.DAT_BLVN is not None:
      oprot.writeFieldBegin('DAT_BLVN', TType.I64, 47)
      oprot.writeI64(self.DAT_BLVN)
      oprot.writeFieldEnd()
    if self.DAT_ELVN is not None:
      oprot.writeFieldBegin('DAT_ELVN', TType.I64, 48)
      oprot.writeI64(self.DAT_ELVN)
      oprot.writeFieldEnd()
    if self.DAMAGE is not None:
      oprot.writeFieldBegin('DAMAGE', TType.BOOL, 49)
      oprot.writeBool(self.DAMAGE)
      oprot.writeFieldEnd()
    if self.DATA_NS is not None:
      oprot.writeFieldBegin('DATA_NS', TType.I64, 50)
      oprot.writeI64(self.DATA_NS)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.DAT_VV is None:
      raise TProtocol.TProtocolException(message='Required field DAT_VV is unset!')
    if self.DAT_PR is None:
      raise TProtocol.TProtocolException(message='Required field DAT_PR is unset!')
    if self.SER_POL is None:
      raise TProtocol.TProtocolException(message='Required field SER_POL is unset!')
    if self.NOM_POL is None:
      raise TProtocol.TProtocolException(message='Required field NOM_POL is unset!')
    if self.FAMIL is None:
      raise TProtocol.TProtocolException(message='Required field FAMIL is unset!')
    if self.IMYA is None:
      raise TProtocol.TProtocolException(message='Required field IMYA is unset!')
    if self.OT is None:
      raise TProtocol.TProtocolException(message='Required field OT is unset!')
    if self.KOD_F is None:
      raise TProtocol.TProtocolException(message='Required field KOD_F is unset!')
    if self.POL is None:
      raise TProtocol.TProtocolException(message='Required field POL is unset!')
    if self.D_R is None:
      raise TProtocol.TProtocolException(message='Required field D_R is unset!')
    if self.RAION is None:
      raise TProtocol.TProtocolException(message='Required field RAION is unset!')
    if self.KOD_T is None:
      raise TProtocol.TProtocolException(message='Required field KOD_T is unset!')
    if self.NAS_P is None:
      raise TProtocol.TProtocolException(message='Required field NAS_P is unset!')
    if self.UL is None:
      raise TProtocol.TProtocolException(message='Required field UL is unset!')
    if self.DOM is None:
      raise TProtocol.TProtocolException(message='Required field DOM is unset!')
    if self.KV is None:
      raise TProtocol.TProtocolException(message='Required field KV is unset!')
    if self.KATEGOR is None:
      raise TProtocol.TProtocolException(message='Required field KATEGOR is unset!')
    if self.MES_R is None:
      raise TProtocol.TProtocolException(message='Required field MES_R is unset!')
    if self.KOD_PR is None:
      raise TProtocol.TProtocolException(message='Required field KOD_PR is unset!')
    if self.OTD is None:
      raise TProtocol.TProtocolException(message='Required field OTD is unset!')
    if self.N_KART is None:
      raise TProtocol.TProtocolException(message='Required field N_KART is unset!')
    if self.DIA_O is None:
      raise TProtocol.TProtocolException(message='Required field DIA_O is unset!')
    if self.DOP_D is None:
      raise TProtocol.TProtocolException(message='Required field DOP_D is unset!')
    if self.DIA_S is None:
      raise TProtocol.TProtocolException(message='Required field DIA_S is unset!')
    if self.DOP_S is None:
      raise TProtocol.TProtocolException(message='Required field DOP_S is unset!')
    if self.DIA_S1 is None:
      raise TProtocol.TProtocolException(message='Required field DIA_S1 is unset!')
    if self.DOP_S1 is None:
      raise TProtocol.TProtocolException(message='Required field DOP_S1 is unset!')
    if self.OSL is None:
      raise TProtocol.TProtocolException(message='Required field OSL is unset!')
    if self.DOP_OSL is None:
      raise TProtocol.TProtocolException(message='Required field DOP_OSL is unset!')
    if self.KSG_MS is None:
      raise TProtocol.TProtocolException(message='Required field KSG_MS is unset!')
    if self.DL_LEC is None:
      raise TProtocol.TProtocolException(message='Required field DL_LEC is unset!')
    if self.SL is None:
      raise TProtocol.TProtocolException(message='Required field SL is unset!')
    if self.ISH_LEC is None:
      raise TProtocol.TProtocolException(message='Required field ISH_LEC is unset!')
    if self.PR_NZ is None:
      raise TProtocol.TProtocolException(message='Required field PR_NZ is unset!')
    if self.STOIM is None:
      raise TProtocol.TProtocolException(message='Required field STOIM is unset!')
    if self.KOD_VR is None:
      raise TProtocol.TProtocolException(message='Required field KOD_VR is unset!')
    if self.KOD_O is None:
      raise TProtocol.TProtocolException(message='Required field KOD_O is unset!')
    if self.N_OPER is None:
      raise TProtocol.TProtocolException(message='Required field N_OPER is unset!')
    if self.KOL_USL is None:
      raise TProtocol.TProtocolException(message='Required field KOL_USL is unset!')
    if self.Tarif is None:
      raise TProtocol.TProtocolException(message='Required field Tarif is unset!')
    if self.KOD_TSK is None:
      raise TProtocol.TProtocolException(message='Required field KOD_TSK is unset!')
    if self.NAMCMO is None:
      raise TProtocol.TProtocolException(message='Required field NAMCMO is unset!')
    if self.KOD_DOK is None:
      raise TProtocol.TProtocolException(message='Required field KOD_DOK is unset!')
    if self.SER_DOK is None:
      raise TProtocol.TProtocolException(message='Required field SER_DOK is unset!')
    if self.NOM_DOK is None:
      raise TProtocol.TProtocolException(message='Required field NOM_DOK is unset!')
    if self.VMP is None:
      raise TProtocol.TProtocolException(message='Required field VMP is unset!')
    if self.DAT_BLVN is None:
      raise TProtocol.TProtocolException(message='Required field DAT_BLVN is unset!')
    if self.DAT_ELVN is None:
      raise TProtocol.TProtocolException(message='Required field DAT_ELVN is unset!')
    if self.DAMAGE is None:
      raise TProtocol.TProtocolException(message='Required field DAMAGE is unset!')
    if self.DATA_NS is None:
      raise TProtocol.TProtocolException(message='Required field DATA_NS is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DBFPoliclinic(object):
  """
  Attributes:
   - DAT_VV
   - DAT_PR
   - SER_POL
   - NOM_POL
   - SNILS
   - FAMIL
   - IMYA
   - OT
   - KOD_F
   - POL
   - D_R
   - RAION
   - KOD_T
   - NAS_P
   - UL
   - DOM
   - KV
   - KATEGOR
   - MES_R
   - KOD_PR
   - OTD
   - N_KART
   - KC
   - DIA_O
   - DOP_D
   - DIA_S
   - DOP_S
   - DIA_S1
   - DOP_S1
   - OSL
   - DOP_OSL
   - KSG_MS
   - DL_LEC
   - KOL_POS
   - POS_D
   - SL
   - ISH_LEC
   - PR_NZ
   - STOIM
   - KOD_VR
   - S_VR
   - NOM_SL
   - KOD_O
   - N_OPER
   - KOL_USL
   - KOD_TSK
   - NAMCMO
   - KOD_DOK
   - SER_DOK
   - NOM_DOK
   - VMP
   - DAT_BLVN
   - DAT_ELVN
   - DAMAGE
   - DATA_NS
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'DAT_VV', None, 0, ), # 1
    (2, TType.I64, 'DAT_PR', None, 0, ), # 2
    (3, TType.STRING, 'SER_POL', None, "", ), # 3
    (4, TType.STRING, 'NOM_POL', None, "", ), # 4
    (5, TType.STRING, 'SNILS', None, "", ), # 5
    (6, TType.STRING, 'FAMIL', None, "", ), # 6
    (7, TType.STRING, 'IMYA', None, "", ), # 7
    (8, TType.STRING, 'OT', None, "", ), # 8
    (9, TType.STRING, 'KOD_F', None, "", ), # 9
    (10, TType.STRING, 'POL', None, "Н", ), # 10
    (11, TType.I64, 'D_R', None, 0, ), # 11
    (12, TType.I16, 'RAION', None, 0, ), # 12
    (13, TType.I16, 'KOD_T', None, 0, ), # 13
    (14, TType.STRING, 'NAS_P', None, "", ), # 14
    (15, TType.STRING, 'UL', None, "", ), # 15
    (16, TType.STRING, 'DOM', None, "", ), # 16
    (17, TType.STRING, 'KV', None, "", ), # 17
    (18, TType.I32, 'KATEGOR', None, 1, ), # 18
    (19, TType.STRING, 'MES_R', None, "Неработающий", ), # 19
    (20, TType.STRING, 'KOD_PR', None, "Не заполняется", ), # 20
    (21, TType.I16, 'OTD', None, 0, ), # 21
    (22, TType.STRING, 'N_KART', None, "", ), # 22
    (23, TType.I16, 'KC', None, 0, ), # 23
    (24, TType.STRING, 'DIA_O', None, "", ), # 24
    (25, TType.STRING, 'DOP_D', None, "", ), # 25
    (26, TType.STRING, 'DIA_S', None, "", ), # 26
    (27, TType.STRING, 'DOP_S', None, "", ), # 27
    (28, TType.STRING, 'DIA_S1', None, "", ), # 28
    (29, TType.STRING, 'DOP_S1', None, "", ), # 29
    (30, TType.STRING, 'OSL', None, "", ), # 30
    (31, TType.STRING, 'DOP_OSL', None, "", ), # 31
    (32, TType.STRING, 'KSG_MS', None, "Не заполняется", ), # 32
    (33, TType.I16, 'DL_LEC', None, 0, ), # 33
    (34, TType.I16, 'KOL_POS', None, 0, ), # 34
    (35, TType.I16, 'POS_D', None, 0, ), # 35
    (36, TType.I16, 'SL', None, 0, ), # 36
    (37, TType.I16, 'ISH_LEC', None, 0, ), # 37
    (38, TType.I16, 'PR_NZ', None, 0, ), # 38
    (39, TType.DOUBLE, 'STOIM', None, 0, ), # 39
    (40, TType.STRING, 'KOD_VR', None, "", ), # 40
    (41, TType.I16, 'S_VR', None, 0, ), # 41
    (42, TType.STRING, 'NOM_SL', None, "Не заполняется", ), # 42
    (43, TType.STRING, 'KOD_O', None, "Не заполняется", ), # 43
    (44, TType.STRING, 'N_OPER', None, "Не заполняется", ), # 44
    (45, TType.I32, 'KOL_USL', None, 0, ), # 45
    (46, TType.I16, 'KOD_TSK', None, 0, ), # 46
    (47, TType.STRING, 'NAMCMO', None, "", ), # 47
    (48, TType.I16, 'KOD_DOK', None, 0, ), # 48
    (49, TType.STRING, 'SER_DOK', None, "", ), # 49
    (50, TType.STRING, 'NOM_DOK', None, "", ), # 50
    (51, TType.I16, 'VMP', None, 0, ), # 51
    (52, TType.I64, 'DAT_BLVN', None, 0, ), # 52
    (53, TType.I64, 'DAT_ELVN', None, 0, ), # 53
    (54, TType.BOOL, 'DAMAGE', None, False, ), # 54
    (55, TType.I64, 'DATA_NS', None, 0, ), # 55
  )

  def __init__(self, DAT_VV=thrift_spec[1][4], DAT_PR=thrift_spec[2][4], SER_POL=thrift_spec[3][4], NOM_POL=thrift_spec[4][4], SNILS=thrift_spec[5][4], FAMIL=thrift_spec[6][4], IMYA=thrift_spec[7][4], OT=thrift_spec[8][4], KOD_F=thrift_spec[9][4], POL=thrift_spec[10][4], D_R=thrift_spec[11][4], RAION=thrift_spec[12][4], KOD_T=thrift_spec[13][4], NAS_P=thrift_spec[14][4], UL=thrift_spec[15][4], DOM=thrift_spec[16][4], KV=thrift_spec[17][4], KATEGOR=thrift_spec[18][4], MES_R=thrift_spec[19][4], KOD_PR=thrift_spec[20][4], OTD=thrift_spec[21][4], N_KART=thrift_spec[22][4], KC=thrift_spec[23][4], DIA_O=thrift_spec[24][4], DOP_D=thrift_spec[25][4], DIA_S=thrift_spec[26][4], DOP_S=thrift_spec[27][4], DIA_S1=thrift_spec[28][4], DOP_S1=thrift_spec[29][4], OSL=thrift_spec[30][4], DOP_OSL=thrift_spec[31][4], KSG_MS=thrift_spec[32][4], DL_LEC=thrift_spec[33][4], KOL_POS=thrift_spec[34][4], POS_D=thrift_spec[35][4], SL=thrift_spec[36][4], ISH_LEC=thrift_spec[37][4], PR_NZ=thrift_spec[38][4], STOIM=thrift_spec[39][4], KOD_VR=thrift_spec[40][4], S_VR=thrift_spec[41][4], NOM_SL=thrift_spec[42][4], KOD_O=thrift_spec[43][4], N_OPER=thrift_spec[44][4], KOL_USL=thrift_spec[45][4], KOD_TSK=thrift_spec[46][4], NAMCMO=thrift_spec[47][4], KOD_DOK=thrift_spec[48][4], SER_DOK=thrift_spec[49][4], NOM_DOK=thrift_spec[50][4], VMP=thrift_spec[51][4], DAT_BLVN=thrift_spec[52][4], DAT_ELVN=thrift_spec[53][4], DAMAGE=thrift_spec[54][4], DATA_NS=thrift_spec[55][4],):
    if DAT_VV is self.thrift_spec[1][4]:
      DAT_VV = 0
    self.DAT_VV = DAT_VV
    if DAT_PR is self.thrift_spec[2][4]:
      DAT_PR = 0
    self.DAT_PR = DAT_PR
    self.SER_POL = SER_POL
    self.NOM_POL = NOM_POL
    self.SNILS = SNILS
    self.FAMIL = FAMIL
    self.IMYA = IMYA
    self.OT = OT
    self.KOD_F = KOD_F
    self.POL = POL
    if D_R is self.thrift_spec[11][4]:
      D_R = 0
    self.D_R = D_R
    if RAION is self.thrift_spec[12][4]:
      RAION = 0
    self.RAION = RAION
    if KOD_T is self.thrift_spec[13][4]:
      KOD_T = 0
    self.KOD_T = KOD_T
    self.NAS_P = NAS_P
    self.UL = UL
    self.DOM = DOM
    self.KV = KV
    if KATEGOR is self.thrift_spec[18][4]:
      KATEGOR = 1
    self.KATEGOR = KATEGOR
    self.MES_R = MES_R
    self.KOD_PR = KOD_PR
    if OTD is self.thrift_spec[21][4]:
      OTD = 0
    self.OTD = OTD
    self.N_KART = N_KART
    if KC is self.thrift_spec[23][4]:
      KC = 0
    self.KC = KC
    self.DIA_O = DIA_O
    self.DOP_D = DOP_D
    self.DIA_S = DIA_S
    self.DOP_S = DOP_S
    self.DIA_S1 = DIA_S1
    self.DOP_S1 = DOP_S1
    self.OSL = OSL
    self.DOP_OSL = DOP_OSL
    self.KSG_MS = KSG_MS
    if DL_LEC is self.thrift_spec[33][4]:
      DL_LEC = 0
    self.DL_LEC = DL_LEC
    if KOL_POS is self.thrift_spec[34][4]:
      KOL_POS = 0
    self.KOL_POS = KOL_POS
    if POS_D is self.thrift_spec[35][4]:
      POS_D = 0
    self.POS_D = POS_D
    if SL is self.thrift_spec[36][4]:
      SL = 0
    self.SL = SL
    if ISH_LEC is self.thrift_spec[37][4]:
      ISH_LEC = 0
    self.ISH_LEC = ISH_LEC
    if PR_NZ is self.thrift_spec[38][4]:
      PR_NZ = 0
    self.PR_NZ = PR_NZ
    self.STOIM = STOIM
    self.KOD_VR = KOD_VR
    if S_VR is self.thrift_spec[41][4]:
      S_VR = 0
    self.S_VR = S_VR
    self.NOM_SL = NOM_SL
    self.KOD_O = KOD_O
    self.N_OPER = N_OPER
    if KOL_USL is self.thrift_spec[45][4]:
      KOL_USL = 0
    self.KOL_USL = KOL_USL
    if KOD_TSK is self.thrift_spec[46][4]:
      KOD_TSK = 0
    self.KOD_TSK = KOD_TSK
    self.NAMCMO = NAMCMO
    if KOD_DOK is self.thrift_spec[48][4]:
      KOD_DOK = 0
    self.KOD_DOK = KOD_DOK
    self.SER_DOK = SER_DOK
    self.NOM_DOK = NOM_DOK
    if VMP is self.thrift_spec[51][4]:
      VMP = 0
    self.VMP = VMP
    if DAT_BLVN is self.thrift_spec[52][4]:
      DAT_BLVN = 0
    self.DAT_BLVN = DAT_BLVN
    if DAT_ELVN is self.thrift_spec[53][4]:
      DAT_ELVN = 0
    self.DAT_ELVN = DAT_ELVN
    self.DAMAGE = DAMAGE
    if DATA_NS is self.thrift_spec[55][4]:
      DATA_NS = 0
    self.DATA_NS = DATA_NS

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.DAT_VV = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.DAT_PR = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.SER_POL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.NOM_POL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.SNILS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.FAMIL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.IMYA = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.OT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.KOD_F = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.POL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.D_R = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.RAION = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.KOD_T = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.NAS_P = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.UL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.DOM = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.KV = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.KATEGOR = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.MES_R = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.KOD_PR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I16:
          self.OTD = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.N_KART = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I16:
          self.KC = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.DIA_O = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.DOP_D = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.DIA_S = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.DOP_S = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.DIA_S1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.STRING:
          self.DOP_S1 = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.OSL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.STRING:
          self.DOP_OSL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.KSG_MS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I16:
          self.DL_LEC = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I16:
          self.KOL_POS = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I16:
          self.POS_D = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I16:
          self.SL = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I16:
          self.ISH_LEC = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I16:
          self.PR_NZ = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.DOUBLE:
          self.STOIM = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.KOD_VR = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I16:
          self.S_VR = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.NOM_SL = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.STRING:
          self.KOD_O = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.STRING:
          self.N_OPER = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I32:
          self.KOL_USL = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I16:
          self.KOD_TSK = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.STRING:
          self.NAMCMO = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I16:
          self.KOD_DOK = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.STRING:
          self.SER_DOK = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.NOM_DOK = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I16:
          self.VMP = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.I64:
          self.DAT_BLVN = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.I64:
          self.DAT_ELVN = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.BOOL:
          self.DAMAGE = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.I64:
          self.DATA_NS = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DBFPoliclinic')
    if self.DAT_VV is not None:
      oprot.writeFieldBegin('DAT_VV', TType.I64, 1)
      oprot.writeI64(self.DAT_VV)
      oprot.writeFieldEnd()
    if self.DAT_PR is not None:
      oprot.writeFieldBegin('DAT_PR', TType.I64, 2)
      oprot.writeI64(self.DAT_PR)
      oprot.writeFieldEnd()
    if self.SER_POL is not None:
      oprot.writeFieldBegin('SER_POL', TType.STRING, 3)
      oprot.writeString(self.SER_POL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NOM_POL is not None:
      oprot.writeFieldBegin('NOM_POL', TType.STRING, 4)
      oprot.writeString(self.NOM_POL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SNILS is not None:
      oprot.writeFieldBegin('SNILS', TType.STRING, 5)
      oprot.writeString(self.SNILS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.FAMIL is not None:
      oprot.writeFieldBegin('FAMIL', TType.STRING, 6)
      oprot.writeString(self.FAMIL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.IMYA is not None:
      oprot.writeFieldBegin('IMYA', TType.STRING, 7)
      oprot.writeString(self.IMYA.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OT is not None:
      oprot.writeFieldBegin('OT', TType.STRING, 8)
      oprot.writeString(self.OT.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOD_F is not None:
      oprot.writeFieldBegin('KOD_F', TType.STRING, 9)
      oprot.writeString(self.KOD_F.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.POL is not None:
      oprot.writeFieldBegin('POL', TType.STRING, 10)
      oprot.writeString(self.POL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.D_R is not None:
      oprot.writeFieldBegin('D_R', TType.I64, 11)
      oprot.writeI64(self.D_R)
      oprot.writeFieldEnd()
    if self.RAION is not None:
      oprot.writeFieldBegin('RAION', TType.I16, 12)
      oprot.writeI16(self.RAION)
      oprot.writeFieldEnd()
    if self.KOD_T is not None:
      oprot.writeFieldBegin('KOD_T', TType.I16, 13)
      oprot.writeI16(self.KOD_T)
      oprot.writeFieldEnd()
    if self.NAS_P is not None:
      oprot.writeFieldBegin('NAS_P', TType.STRING, 14)
      oprot.writeString(self.NAS_P.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.UL is not None:
      oprot.writeFieldBegin('UL', TType.STRING, 15)
      oprot.writeString(self.UL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOM is not None:
      oprot.writeFieldBegin('DOM', TType.STRING, 16)
      oprot.writeString(self.DOM.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KV is not None:
      oprot.writeFieldBegin('KV', TType.STRING, 17)
      oprot.writeString(self.KV.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KATEGOR is not None:
      oprot.writeFieldBegin('KATEGOR', TType.I32, 18)
      oprot.writeI32(self.KATEGOR)
      oprot.writeFieldEnd()
    if self.MES_R is not None:
      oprot.writeFieldBegin('MES_R', TType.STRING, 19)
      oprot.writeString(self.MES_R.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOD_PR is not None:
      oprot.writeFieldBegin('KOD_PR', TType.STRING, 20)
      oprot.writeString(self.KOD_PR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OTD is not None:
      oprot.writeFieldBegin('OTD', TType.I16, 21)
      oprot.writeI16(self.OTD)
      oprot.writeFieldEnd()
    if self.N_KART is not None:
      oprot.writeFieldBegin('N_KART', TType.STRING, 22)
      oprot.writeString(self.N_KART.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KC is not None:
      oprot.writeFieldBegin('KC', TType.I16, 23)
      oprot.writeI16(self.KC)
      oprot.writeFieldEnd()
    if self.DIA_O is not None:
      oprot.writeFieldBegin('DIA_O', TType.STRING, 24)
      oprot.writeString(self.DIA_O.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOP_D is not None:
      oprot.writeFieldBegin('DOP_D', TType.STRING, 25)
      oprot.writeString(self.DOP_D.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DIA_S is not None:
      oprot.writeFieldBegin('DIA_S', TType.STRING, 26)
      oprot.writeString(self.DIA_S.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOP_S is not None:
      oprot.writeFieldBegin('DOP_S', TType.STRING, 27)
      oprot.writeString(self.DOP_S.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DIA_S1 is not None:
      oprot.writeFieldBegin('DIA_S1', TType.STRING, 28)
      oprot.writeString(self.DIA_S1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOP_S1 is not None:
      oprot.writeFieldBegin('DOP_S1', TType.STRING, 29)
      oprot.writeString(self.DOP_S1.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.OSL is not None:
      oprot.writeFieldBegin('OSL', TType.STRING, 30)
      oprot.writeString(self.OSL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DOP_OSL is not None:
      oprot.writeFieldBegin('DOP_OSL', TType.STRING, 31)
      oprot.writeString(self.DOP_OSL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KSG_MS is not None:
      oprot.writeFieldBegin('KSG_MS', TType.STRING, 32)
      oprot.writeString(self.KSG_MS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DL_LEC is not None:
      oprot.writeFieldBegin('DL_LEC', TType.I16, 33)
      oprot.writeI16(self.DL_LEC)
      oprot.writeFieldEnd()
    if self.KOL_POS is not None:
      oprot.writeFieldBegin('KOL_POS', TType.I16, 34)
      oprot.writeI16(self.KOL_POS)
      oprot.writeFieldEnd()
    if self.POS_D is not None:
      oprot.writeFieldBegin('POS_D', TType.I16, 35)
      oprot.writeI16(self.POS_D)
      oprot.writeFieldEnd()
    if self.SL is not None:
      oprot.writeFieldBegin('SL', TType.I16, 36)
      oprot.writeI16(self.SL)
      oprot.writeFieldEnd()
    if self.ISH_LEC is not None:
      oprot.writeFieldBegin('ISH_LEC', TType.I16, 37)
      oprot.writeI16(self.ISH_LEC)
      oprot.writeFieldEnd()
    if self.PR_NZ is not None:
      oprot.writeFieldBegin('PR_NZ', TType.I16, 38)
      oprot.writeI16(self.PR_NZ)
      oprot.writeFieldEnd()
    if self.STOIM is not None:
      oprot.writeFieldBegin('STOIM', TType.DOUBLE, 39)
      oprot.writeDouble(self.STOIM)
      oprot.writeFieldEnd()
    if self.KOD_VR is not None:
      oprot.writeFieldBegin('KOD_VR', TType.STRING, 40)
      oprot.writeString(self.KOD_VR.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.S_VR is not None:
      oprot.writeFieldBegin('S_VR', TType.I16, 41)
      oprot.writeI16(self.S_VR)
      oprot.writeFieldEnd()
    if self.NOM_SL is not None:
      oprot.writeFieldBegin('NOM_SL', TType.STRING, 42)
      oprot.writeString(self.NOM_SL.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOD_O is not None:
      oprot.writeFieldBegin('KOD_O', TType.STRING, 43)
      oprot.writeString(self.KOD_O.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.N_OPER is not None:
      oprot.writeFieldBegin('N_OPER', TType.STRING, 44)
      oprot.writeString(self.N_OPER.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOL_USL is not None:
      oprot.writeFieldBegin('KOL_USL', TType.I32, 45)
      oprot.writeI32(self.KOL_USL)
      oprot.writeFieldEnd()
    if self.KOD_TSK is not None:
      oprot.writeFieldBegin('KOD_TSK', TType.I16, 46)
      oprot.writeI16(self.KOD_TSK)
      oprot.writeFieldEnd()
    if self.NAMCMO is not None:
      oprot.writeFieldBegin('NAMCMO', TType.STRING, 47)
      oprot.writeString(self.NAMCMO.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.KOD_DOK is not None:
      oprot.writeFieldBegin('KOD_DOK', TType.I16, 48)
      oprot.writeI16(self.KOD_DOK)
      oprot.writeFieldEnd()
    if self.SER_DOK is not None:
      oprot.writeFieldBegin('SER_DOK', TType.STRING, 49)
      oprot.writeString(self.SER_DOK.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.NOM_DOK is not None:
      oprot.writeFieldBegin('NOM_DOK', TType.STRING, 50)
      oprot.writeString(self.NOM_DOK.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.VMP is not None:
      oprot.writeFieldBegin('VMP', TType.I16, 51)
      oprot.writeI16(self.VMP)
      oprot.writeFieldEnd()
    if self.DAT_BLVN is not None:
      oprot.writeFieldBegin('DAT_BLVN', TType.I64, 52)
      oprot.writeI64(self.DAT_BLVN)
      oprot.writeFieldEnd()
    if self.DAT_ELVN is not None:
      oprot.writeFieldBegin('DAT_ELVN', TType.I64, 53)
      oprot.writeI64(self.DAT_ELVN)
      oprot.writeFieldEnd()
    if self.DAMAGE is not None:
      oprot.writeFieldBegin('DAMAGE', TType.BOOL, 54)
      oprot.writeBool(self.DAMAGE)
      oprot.writeFieldEnd()
    if self.DATA_NS is not None:
      oprot.writeFieldBegin('DATA_NS', TType.I64, 55)
      oprot.writeI64(self.DATA_NS)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.DAT_VV is None:
      raise TProtocol.TProtocolException(message='Required field DAT_VV is unset!')
    if self.DAT_PR is None:
      raise TProtocol.TProtocolException(message='Required field DAT_PR is unset!')
    if self.SER_POL is None:
      raise TProtocol.TProtocolException(message='Required field SER_POL is unset!')
    if self.NOM_POL is None:
      raise TProtocol.TProtocolException(message='Required field NOM_POL is unset!')
    if self.SNILS is None:
      raise TProtocol.TProtocolException(message='Required field SNILS is unset!')
    if self.FAMIL is None:
      raise TProtocol.TProtocolException(message='Required field FAMIL is unset!')
    if self.IMYA is None:
      raise TProtocol.TProtocolException(message='Required field IMYA is unset!')
    if self.OT is None:
      raise TProtocol.TProtocolException(message='Required field OT is unset!')
    if self.KOD_F is None:
      raise TProtocol.TProtocolException(message='Required field KOD_F is unset!')
    if self.POL is None:
      raise TProtocol.TProtocolException(message='Required field POL is unset!')
    if self.D_R is None:
      raise TProtocol.TProtocolException(message='Required field D_R is unset!')
    if self.RAION is None:
      raise TProtocol.TProtocolException(message='Required field RAION is unset!')
    if self.KOD_T is None:
      raise TProtocol.TProtocolException(message='Required field KOD_T is unset!')
    if self.NAS_P is None:
      raise TProtocol.TProtocolException(message='Required field NAS_P is unset!')
    if self.UL is None:
      raise TProtocol.TProtocolException(message='Required field UL is unset!')
    if self.DOM is None:
      raise TProtocol.TProtocolException(message='Required field DOM is unset!')
    if self.KV is None:
      raise TProtocol.TProtocolException(message='Required field KV is unset!')
    if self.KATEGOR is None:
      raise TProtocol.TProtocolException(message='Required field KATEGOR is unset!')
    if self.MES_R is None:
      raise TProtocol.TProtocolException(message='Required field MES_R is unset!')
    if self.KOD_PR is None:
      raise TProtocol.TProtocolException(message='Required field KOD_PR is unset!')
    if self.OTD is None:
      raise TProtocol.TProtocolException(message='Required field OTD is unset!')
    if self.N_KART is None:
      raise TProtocol.TProtocolException(message='Required field N_KART is unset!')
    if self.KC is None:
      raise TProtocol.TProtocolException(message='Required field KC is unset!')
    if self.DIA_O is None:
      raise TProtocol.TProtocolException(message='Required field DIA_O is unset!')
    if self.DOP_D is None:
      raise TProtocol.TProtocolException(message='Required field DOP_D is unset!')
    if self.DIA_S is None:
      raise TProtocol.TProtocolException(message='Required field DIA_S is unset!')
    if self.DOP_S is None:
      raise TProtocol.TProtocolException(message='Required field DOP_S is unset!')
    if self.DIA_S1 is None:
      raise TProtocol.TProtocolException(message='Required field DIA_S1 is unset!')
    if self.DOP_S1 is None:
      raise TProtocol.TProtocolException(message='Required field DOP_S1 is unset!')
    if self.OSL is None:
      raise TProtocol.TProtocolException(message='Required field OSL is unset!')
    if self.DOP_OSL is None:
      raise TProtocol.TProtocolException(message='Required field DOP_OSL is unset!')
    if self.KSG_MS is None:
      raise TProtocol.TProtocolException(message='Required field KSG_MS is unset!')
    if self.DL_LEC is None:
      raise TProtocol.TProtocolException(message='Required field DL_LEC is unset!')
    if self.KOL_POS is None:
      raise TProtocol.TProtocolException(message='Required field KOL_POS is unset!')
    if self.POS_D is None:
      raise TProtocol.TProtocolException(message='Required field POS_D is unset!')
    if self.SL is None:
      raise TProtocol.TProtocolException(message='Required field SL is unset!')
    if self.ISH_LEC is None:
      raise TProtocol.TProtocolException(message='Required field ISH_LEC is unset!')
    if self.PR_NZ is None:
      raise TProtocol.TProtocolException(message='Required field PR_NZ is unset!')
    if self.STOIM is None:
      raise TProtocol.TProtocolException(message='Required field STOIM is unset!')
    if self.KOD_VR is None:
      raise TProtocol.TProtocolException(message='Required field KOD_VR is unset!')
    if self.S_VR is None:
      raise TProtocol.TProtocolException(message='Required field S_VR is unset!')
    if self.NOM_SL is None:
      raise TProtocol.TProtocolException(message='Required field NOM_SL is unset!')
    if self.KOD_O is None:
      raise TProtocol.TProtocolException(message='Required field KOD_O is unset!')
    if self.N_OPER is None:
      raise TProtocol.TProtocolException(message='Required field N_OPER is unset!')
    if self.KOL_USL is None:
      raise TProtocol.TProtocolException(message='Required field KOL_USL is unset!')
    if self.KOD_TSK is None:
      raise TProtocol.TProtocolException(message='Required field KOD_TSK is unset!')
    if self.NAMCMO is None:
      raise TProtocol.TProtocolException(message='Required field NAMCMO is unset!')
    if self.KOD_DOK is None:
      raise TProtocol.TProtocolException(message='Required field KOD_DOK is unset!')
    if self.SER_DOK is None:
      raise TProtocol.TProtocolException(message='Required field SER_DOK is unset!')
    if self.NOM_DOK is None:
      raise TProtocol.TProtocolException(message='Required field NOM_DOK is unset!')
    if self.VMP is None:
      raise TProtocol.TProtocolException(message='Required field VMP is unset!')
    if self.DAT_BLVN is None:
      raise TProtocol.TProtocolException(message='Required field DAT_BLVN is unset!')
    if self.DAT_ELVN is None:
      raise TProtocol.TProtocolException(message='Required field DAT_ELVN is unset!')
    if self.DAMAGE is None:
      raise TProtocol.TProtocolException(message='Required field DAMAGE is unset!')
    if self.DATA_NS is None:
      raise TProtocol.TProtocolException(message='Required field DATA_NS is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Account(object):
  """
  Attributes:
   - id
   - number
   - date
   - begDate
   - endDate
   - amount
   - uet
   - sum
   - exposeDate
   - payedAmount
   - payedSum
   - refusedAmount
   - refusedSum
   - contractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'number', None, None, ), # 2
    (3, TType.I64, 'date', None, None, ), # 3
    (4, TType.I64, 'begDate', None, None, ), # 4
    (5, TType.I64, 'endDate', None, None, ), # 5
    (6, TType.I32, 'amount', None, None, ), # 6
    (7, TType.DOUBLE, 'uet', None, None, ), # 7
    (8, TType.DOUBLE, 'sum', None, None, ), # 8
    (9, TType.I64, 'exposeDate', None, None, ), # 9
    (10, TType.I32, 'payedAmount', None, None, ), # 10
    (11, TType.DOUBLE, 'payedSum', None, None, ), # 11
    (12, TType.I32, 'refusedAmount', None, None, ), # 12
    (13, TType.DOUBLE, 'refusedSum', None, None, ), # 13
    (14, TType.I32, 'contractId', None, None, ), # 14
  )

  def __init__(self, id=None, number=None, date=None, begDate=None, endDate=None, amount=None, uet=None, sum=None, exposeDate=None, payedAmount=None, payedSum=None, refusedAmount=None, refusedSum=None, contractId=None,):
    self.id = id
    self.number = number
    self.date = date
    self.begDate = begDate
    self.endDate = endDate
    self.amount = amount
    self.uet = uet
    self.sum = sum
    self.exposeDate = exposeDate
    self.payedAmount = payedAmount
    self.payedSum = payedSum
    self.refusedAmount = refusedAmount
    self.refusedSum = refusedSum
    self.contractId = contractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.number = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.begDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.amount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.uet = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.sum = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.exposeDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.payedAmount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.payedSum = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.refusedAmount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.refusedSum = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.contractId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Account')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.number is not None:
      oprot.writeFieldBegin('number', TType.STRING, 2)
      oprot.writeString(self.number.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 3)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.begDate is not None:
      oprot.writeFieldBegin('begDate', TType.I64, 4)
      oprot.writeI64(self.begDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 5)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 6)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.uet is not None:
      oprot.writeFieldBegin('uet', TType.DOUBLE, 7)
      oprot.writeDouble(self.uet)
      oprot.writeFieldEnd()
    if self.sum is not None:
      oprot.writeFieldBegin('sum', TType.DOUBLE, 8)
      oprot.writeDouble(self.sum)
      oprot.writeFieldEnd()
    if self.exposeDate is not None:
      oprot.writeFieldBegin('exposeDate', TType.I64, 9)
      oprot.writeI64(self.exposeDate)
      oprot.writeFieldEnd()
    if self.payedAmount is not None:
      oprot.writeFieldBegin('payedAmount', TType.I32, 10)
      oprot.writeI32(self.payedAmount)
      oprot.writeFieldEnd()
    if self.payedSum is not None:
      oprot.writeFieldBegin('payedSum', TType.DOUBLE, 11)
      oprot.writeDouble(self.payedSum)
      oprot.writeFieldEnd()
    if self.refusedAmount is not None:
      oprot.writeFieldBegin('refusedAmount', TType.I32, 12)
      oprot.writeI32(self.refusedAmount)
      oprot.writeFieldEnd()
    if self.refusedSum is not None:
      oprot.writeFieldBegin('refusedSum', TType.DOUBLE, 13)
      oprot.writeDouble(self.refusedSum)
      oprot.writeFieldEnd()
    if self.contractId is not None:
      oprot.writeFieldBegin('contractId', TType.I32, 14)
      oprot.writeI32(self.contractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.number is None:
      raise TProtocol.TProtocolException(message='Required field number is unset!')
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    if self.begDate is None:
      raise TProtocol.TProtocolException(message='Required field begDate is unset!')
    if self.endDate is None:
      raise TProtocol.TProtocolException(message='Required field endDate is unset!')
    if self.amount is None:
      raise TProtocol.TProtocolException(message='Required field amount is unset!')
    if self.uet is None:
      raise TProtocol.TProtocolException(message='Required field uet is unset!')
    if self.sum is None:
      raise TProtocol.TProtocolException(message='Required field sum is unset!')
    if self.payedAmount is None:
      raise TProtocol.TProtocolException(message='Required field payedAmount is unset!')
    if self.payedSum is None:
      raise TProtocol.TProtocolException(message='Required field payedSum is unset!')
    if self.refusedAmount is None:
      raise TProtocol.TProtocolException(message='Required field refusedAmount is unset!')
    if self.refusedSum is None:
      raise TProtocol.TProtocolException(message='Required field refusedSum is unset!')
    if self.contractId is None:
      raise TProtocol.TProtocolException(message='Required field contractId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountItem(object):
  """
  Attributes:
   - id
   - serviceDate
   - lastName
   - firstName
   - patrName
   - sex
   - birthDate
   - price
   - amount
   - unitName
   - date
   - fileName
   - refuseTypeName
   - refuseTypeCode
   - note
   - doNotUploadAnymore
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I64, 'serviceDate', None, None, ), # 2
    (3, TType.STRING, 'lastName', None, None, ), # 3
    (4, TType.STRING, 'firstName', None, None, ), # 4
    (5, TType.STRING, 'patrName', None, None, ), # 5
    (6, TType.I16, 'sex', None, None, ), # 6
    (7, TType.I64, 'birthDate', None, None, ), # 7
    (8, TType.DOUBLE, 'price', None, None, ), # 8
    (9, TType.DOUBLE, 'amount', None, None, ), # 9
    (10, TType.STRING, 'unitName', None, None, ), # 10
    (11, TType.I64, 'date', None, None, ), # 11
    (12, TType.STRING, 'fileName', None, None, ), # 12
    (13, TType.STRING, 'refuseTypeName', None, None, ), # 13
    (14, TType.I16, 'refuseTypeCode', None, None, ), # 14
    (15, TType.STRING, 'note', None, None, ), # 15
    (16, TType.BOOL, 'doNotUploadAnymore', None, None, ), # 16
  )

  def __init__(self, id=None, serviceDate=None, lastName=None, firstName=None, patrName=None, sex=None, birthDate=None, price=None, amount=None, unitName=None, date=None, fileName=None, refuseTypeName=None, refuseTypeCode=None, note=None, doNotUploadAnymore=None,):
    self.id = id
    self.serviceDate = serviceDate
    self.lastName = lastName
    self.firstName = firstName
    self.patrName = patrName
    self.sex = sex
    self.birthDate = birthDate
    self.price = price
    self.amount = amount
    self.unitName = unitName
    self.date = date
    self.fileName = fileName
    self.refuseTypeName = refuseTypeName
    self.refuseTypeCode = refuseTypeCode
    self.note = note
    self.doNotUploadAnymore = doNotUploadAnymore

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.serviceDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.lastName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.firstName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.patrName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.sex = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.birthDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.amount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.unitName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.fileName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.refuseTypeName = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I16:
          self.refuseTypeCode = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.note = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.doNotUploadAnymore = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountItem')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.serviceDate is not None:
      oprot.writeFieldBegin('serviceDate', TType.I64, 2)
      oprot.writeI64(self.serviceDate)
      oprot.writeFieldEnd()
    if self.lastName is not None:
      oprot.writeFieldBegin('lastName', TType.STRING, 3)
      oprot.writeString(self.lastName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.firstName is not None:
      oprot.writeFieldBegin('firstName', TType.STRING, 4)
      oprot.writeString(self.firstName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.patrName is not None:
      oprot.writeFieldBegin('patrName', TType.STRING, 5)
      oprot.writeString(self.patrName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I16, 6)
      oprot.writeI16(self.sex)
      oprot.writeFieldEnd()
    if self.birthDate is not None:
      oprot.writeFieldBegin('birthDate', TType.I64, 7)
      oprot.writeI64(self.birthDate)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 8)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.DOUBLE, 9)
      oprot.writeDouble(self.amount)
      oprot.writeFieldEnd()
    if self.unitName is not None:
      oprot.writeFieldBegin('unitName', TType.STRING, 10)
      oprot.writeString(self.unitName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 11)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 12)
      oprot.writeString(self.fileName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.refuseTypeName is not None:
      oprot.writeFieldBegin('refuseTypeName', TType.STRING, 13)
      oprot.writeString(self.refuseTypeName.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.refuseTypeCode is not None:
      oprot.writeFieldBegin('refuseTypeCode', TType.I16, 14)
      oprot.writeI16(self.refuseTypeCode)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 15)
      oprot.writeString(self.note.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.doNotUploadAnymore is not None:
      oprot.writeFieldBegin('doNotUploadAnymore', TType.BOOL, 16)
      oprot.writeBool(self.doNotUploadAnymore)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.serviceDate is None:
      raise TProtocol.TProtocolException(message='Required field serviceDate is unset!')
    if self.lastName is None:
      raise TProtocol.TProtocolException(message='Required field lastName is unset!')
    if self.firstName is None:
      raise TProtocol.TProtocolException(message='Required field firstName is unset!')
    if self.patrName is None:
      raise TProtocol.TProtocolException(message='Required field patrName is unset!')
    if self.sex is None:
      raise TProtocol.TProtocolException(message='Required field sex is unset!')
    if self.birthDate is None:
      raise TProtocol.TProtocolException(message='Required field birthDate is unset!')
    if self.price is None:
      raise TProtocol.TProtocolException(message='Required field price is unset!')
    if self.amount is None:
      raise TProtocol.TProtocolException(message='Required field amount is unset!')
    if self.unitName is None:
      raise TProtocol.TProtocolException(message='Required field unitName is unset!')
    if self.fileName is None:
      raise TProtocol.TProtocolException(message='Required field fileName is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountInfo(object):
  """
  AccountInfo
  Структура с данными о счете и его позициях
  @param account Вложенная структура с данными о счете
  @param items  Список вложенных структур с данными о позициях счета

  Attributes:
   - account
   - items
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'account', (Account, Account.thrift_spec), None, ), # 1
    (2, TType.LIST, 'items', (TType.STRUCT,(AccountItem, AccountItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, account=None, items=None,):
    self.account = account
    self.items = items

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.account = Account()
          self.account.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.items = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = AccountItem()
            _elem19.read(iprot)
            self.items.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountInfo')
    if self.account is not None:
      oprot.writeFieldBegin('account', TType.STRUCT, 1)
      self.account.write(oprot)
      oprot.writeFieldEnd()
    if self.items is not None:
      oprot.writeFieldBegin('items', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.items))
      for iter20 in self.items:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.account is None:
      raise TProtocol.TProtocolException(message='Required field account is unset!')
    if self.items is None:
      raise TProtocol.TProtocolException(message='Required field items is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountItemWithMark(object):
  """
  AccountItemWithMark
  Структура с данными о позиции счета которой нужно поменять флаг "не выгружать более"
  @param id                            1) Уникальный идетификатор позиции счета (AccountItem.id)
  @param status                        2) true - Выставить отметку "Не выгружать более" \ false - снять отметку "не выгружать более"
  @param note                          3) примичание к изменению отметки

  Attributes:
   - id
   - status
   - note
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.BOOL, 'status', None, None, ), # 2
    (3, TType.STRING, 'note', None, None, ), # 3
  )

  def __init__(self, id=None, status=None, note=None,):
    self.id = id
    self.status = status
    self.note = note

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.status = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.note = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountItemWithMark')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.BOOL, 2)
      oprot.writeBool(self.status)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 3)
      oprot.writeString(self.note.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Payment(object):
  """
  Структура с данными об оплате выгруженного случая
  @param accountItemId                1)Уникальный идентификатор позиции счета (SLUCH:IDCASE)
  @param refuseTypeCode               2)Код причины отказа в оплате            (SLUCH:REFREASON)
  @param comment                      3)Комментарий к оплате случая            (SLUCH:COMENTSL)

  Attributes:
   - accountItemId
   - refuseTypeCode
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'accountItemId', None, None, ), # 1
    (2, TType.STRING, 'refuseTypeCode', None, None, ), # 2
    (3, TType.STRING, 'comment', None, None, ), # 3
  )

  def __init__(self, accountItemId=None, refuseTypeCode=None, comment=None,):
    self.accountItemId = accountItemId
    self.refuseTypeCode = refuseTypeCode
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.accountItemId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.refuseTypeCode = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.comment = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Payment')
    if self.accountItemId is not None:
      oprot.writeFieldBegin('accountItemId', TType.I32, 1)
      oprot.writeI32(self.accountItemId)
      oprot.writeFieldEnd()
    if self.refuseTypeCode is not None:
      oprot.writeFieldBegin('refuseTypeCode', TType.STRING, 2)
      oprot.writeString(self.refuseTypeCode.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 3)
      oprot.writeString(self.comment.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.accountItemId is None:
      raise TProtocol.TProtocolException(message='Required field accountItemId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrgStructure(object):
  """
  Attributes:
   - id
   - code
   - name
   - parentId
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'code', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'parentId', None, None, ), # 4
    (5, TType.I32, 'type', None, None, ), # 5
  )

  def __init__(self, id=None, code=None, name=None, parentId=None, type=None,):
    self.id = id
    self.code = code
    self.name = name
    self.parentId = parentId
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.code = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.parentId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrgStructure')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 2)
      oprot.writeString(self.code.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.parentId is not None:
      oprot.writeFieldBegin('parentId', TType.I32, 4)
      oprot.writeI32(self.parentId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Contract(object):
  """
  Attributes:
   - id
   - number
   - begDate
   - endDate
   - resolution
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'number', None, None, ), # 2
    (3, TType.I64, 'begDate', None, None, ), # 3
    (4, TType.I64, 'endDate', None, None, ), # 4
    (5, TType.STRING, 'resolution', None, None, ), # 5
  )

  def __init__(self, id=None, number=None, begDate=None, endDate=None, resolution=None,):
    self.id = id
    self.number = number
    self.begDate = begDate
    self.endDate = endDate
    self.resolution = resolution

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.number = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.begDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.endDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.resolution = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Contract')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.number is not None:
      oprot.writeFieldBegin('number', TType.STRING, 2)
      oprot.writeString(self.number.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.begDate is not None:
      oprot.writeFieldBegin('begDate', TType.I64, 3)
      oprot.writeI64(self.begDate)
      oprot.writeFieldEnd()
    if self.endDate is not None:
      oprot.writeFieldBegin('endDate', TType.I64, 4)
      oprot.writeI64(self.endDate)
      oprot.writeFieldEnd()
    if self.resolution is not None:
      oprot.writeFieldBegin('resolution', TType.STRING, 5)
      oprot.writeString(self.resolution.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.number is None:
      raise TProtocol.TProtocolException(message='Required field number is unset!')
    if self.begDate is None:
      raise TProtocol.TProtocolException(message='Required field begDate is unset!')
    if self.endDate is None:
      raise TProtocol.TProtocolException(message='Required field endDate is unset!')
    if self.resolution is None:
      raise TProtocol.TProtocolException(message='Required field resolution is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Schet(object):
  """
  Attributes:
   - CODE
   - CODE_MO
   - YEAR
   - MONTH
   - NSCHET
   - DSCHET
   - PLAT
   - SUMMAV
   - COMENTS
   - SUMMAP
   - SANK_MEK
   - SANK_MEE
   - SANK_EKMP
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'CODE', None, None, ), # 1
    (2, TType.STRING, 'CODE_MO', None, None, ), # 2
    (3, TType.I16, 'YEAR', None, None, ), # 3
    (4, TType.I16, 'MONTH', None, None, ), # 4
    (5, TType.STRING, 'NSCHET', None, None, ), # 5
    (6, TType.I64, 'DSCHET', None, None, ), # 6
    (7, TType.STRING, 'PLAT', None, None, ), # 7
    (8, TType.DOUBLE, 'SUMMAV', None, None, ), # 8
    (9, TType.STRING, 'COMENTS', None, None, ), # 9
    (10, TType.DOUBLE, 'SUMMAP', None, None, ), # 10
    (11, TType.DOUBLE, 'SANK_MEK', None, None, ), # 11
    (12, TType.DOUBLE, 'SANK_MEE', None, None, ), # 12
    (13, TType.DOUBLE, 'SANK_EKMP', None, None, ), # 13
  )

  def __init__(self, CODE=None, CODE_MO=None, YEAR=None, MONTH=None, NSCHET=None, DSCHET=None, PLAT=None, SUMMAV=None, COMENTS=None, SUMMAP=None, SANK_MEK=None, SANK_MEE=None, SANK_EKMP=None,):
    self.CODE = CODE
    self.CODE_MO = CODE_MO
    self.YEAR = YEAR
    self.MONTH = MONTH
    self.NSCHET = NSCHET
    self.DSCHET = DSCHET
    self.PLAT = PLAT
    self.SUMMAV = SUMMAV
    self.COMENTS = COMENTS
    self.SUMMAP = SUMMAP
    self.SANK_MEK = SANK_MEK
    self.SANK_MEE = SANK_MEE
    self.SANK_EKMP = SANK_EKMP

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.CODE = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.CODE_MO = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.YEAR = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.MONTH = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.NSCHET = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.DSCHET = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.PLAT = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.SUMMAV = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.COMENTS = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.SUMMAP = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.SANK_MEK = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.SANK_MEE = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.SANK_EKMP = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Schet')
    if self.CODE is not None:
      oprot.writeFieldBegin('CODE', TType.I16, 1)
      oprot.writeI16(self.CODE)
      oprot.writeFieldEnd()
    if self.CODE_MO is not None:
      oprot.writeFieldBegin('CODE_MO', TType.STRING, 2)
      oprot.writeString(self.CODE_MO.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.YEAR is not None:
      oprot.writeFieldBegin('YEAR', TType.I16, 3)
      oprot.writeI16(self.YEAR)
      oprot.writeFieldEnd()
    if self.MONTH is not None:
      oprot.writeFieldBegin('MONTH', TType.I16, 4)
      oprot.writeI16(self.MONTH)
      oprot.writeFieldEnd()
    if self.NSCHET is not None:
      oprot.writeFieldBegin('NSCHET', TType.STRING, 5)
      oprot.writeString(self.NSCHET.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.DSCHET is not None:
      oprot.writeFieldBegin('DSCHET', TType.I64, 6)
      oprot.writeI64(self.DSCHET)
      oprot.writeFieldEnd()
    if self.PLAT is not None:
      oprot.writeFieldBegin('PLAT', TType.STRING, 7)
      oprot.writeString(self.PLAT.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SUMMAV is not None:
      oprot.writeFieldBegin('SUMMAV', TType.DOUBLE, 8)
      oprot.writeDouble(self.SUMMAV)
      oprot.writeFieldEnd()
    if self.COMENTS is not None:
      oprot.writeFieldBegin('COMENTS', TType.STRING, 9)
      oprot.writeString(self.COMENTS.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.SUMMAP is not None:
      oprot.writeFieldBegin('SUMMAP', TType.DOUBLE, 10)
      oprot.writeDouble(self.SUMMAP)
      oprot.writeFieldEnd()
    if self.SANK_MEK is not None:
      oprot.writeFieldBegin('SANK_MEK', TType.DOUBLE, 11)
      oprot.writeDouble(self.SANK_MEK)
      oprot.writeFieldEnd()
    if self.SANK_MEE is not None:
      oprot.writeFieldBegin('SANK_MEE', TType.DOUBLE, 12)
      oprot.writeDouble(self.SANK_MEE)
      oprot.writeFieldEnd()
    if self.SANK_EKMP is not None:
      oprot.writeFieldBegin('SANK_EKMP', TType.DOUBLE, 13)
      oprot.writeDouble(self.SANK_EKMP)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.CODE is None:
      raise TProtocol.TProtocolException(message='Required field CODE is unset!')
    if self.CODE_MO is None:
      raise TProtocol.TProtocolException(message='Required field CODE_MO is unset!')
    if self.YEAR is None:
      raise TProtocol.TProtocolException(message='Required field YEAR is unset!')
    if self.MONTH is None:
      raise TProtocol.TProtocolException(message='Required field MONTH is unset!')
    if self.NSCHET is None:
      raise TProtocol.TProtocolException(message='Required field NSCHET is unset!')
    if self.DSCHET is None:
      raise TProtocol.TProtocolException(message='Required field DSCHET is unset!')
    if self.SUMMAV is None:
      raise TProtocol.TProtocolException(message='Required field SUMMAV is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XMLRegisters(object):
  """
  Attributes:
   - account
   - registry
   - data
   - patientRegistryFILENAME
   - serviceRegistryFILENAME
   - schet
   - PR_NOV
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'account', (Account, Account.thrift_spec), None, ), # 1
    (2, TType.MAP, 'registry', (TType.STRUCT,(Person, Person.thrift_spec),TType.LIST,(TType.STRUCT,(Sluch, Sluch.thrift_spec))), None, ), # 2
    (3, TType.I64, 'data', None, None, ), # 3
    (4, TType.STRING, 'patientRegistryFILENAME', None, None, ), # 4
    (5, TType.STRING, 'serviceRegistryFILENAME', None, None, ), # 5
    (6, TType.STRUCT, 'schet', (Schet, Schet.thrift_spec), None, ), # 6
    (7, TType.I16, 'PR_NOV', None, None, ), # 7
  )

  def __init__(self, account=None, registry=None, data=None, patientRegistryFILENAME=None, serviceRegistryFILENAME=None, schet=None, PR_NOV=None,):
    self.account = account
    self.registry = registry
    self.data = data
    self.patientRegistryFILENAME = patientRegistryFILENAME
    self.serviceRegistryFILENAME = serviceRegistryFILENAME
    self.schet = schet
    self.PR_NOV = PR_NOV

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.account = Account()
          self.account.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.registry = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin() 
          for _i25 in xrange(_size21):
            _key26 = Person()
            _key26.read(iprot)
            _val27 = []
            (_etype31, _size28) = iprot.readListBegin()
            for _i32 in xrange(_size28):
              _elem33 = Sluch()
              _elem33.read(iprot)
              _val27.append(_elem33)
            iprot.readListEnd()
            self.registry[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.data = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.patientRegistryFILENAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.serviceRegistryFILENAME = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.schet = Schet()
          self.schet.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.PR_NOV = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XMLRegisters')
    if self.account is not None:
      oprot.writeFieldBegin('account', TType.STRUCT, 1)
      self.account.write(oprot)
      oprot.writeFieldEnd()
    if self.registry is not None:
      oprot.writeFieldBegin('registry', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRUCT, TType.LIST, len(self.registry))
      for kiter34,viter35 in self.registry.items():
        kiter34.write(oprot)
        oprot.writeListBegin(TType.STRUCT, len(viter35))
        for iter36 in viter35:
          iter36.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.I64, 3)
      oprot.writeI64(self.data)
      oprot.writeFieldEnd()
    if self.patientRegistryFILENAME is not None:
      oprot.writeFieldBegin('patientRegistryFILENAME', TType.STRING, 4)
      oprot.writeString(self.patientRegistryFILENAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.serviceRegistryFILENAME is not None:
      oprot.writeFieldBegin('serviceRegistryFILENAME', TType.STRING, 5)
      oprot.writeString(self.serviceRegistryFILENAME.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.schet is not None:
      oprot.writeFieldBegin('schet', TType.STRUCT, 6)
      self.schet.write(oprot)
      oprot.writeFieldEnd()
    if self.PR_NOV is not None:
      oprot.writeFieldBegin('PR_NOV', TType.I16, 7)
      oprot.writeI16(self.PR_NOV)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.account is None:
      raise TProtocol.TProtocolException(message='Required field account is unset!')
    if self.registry is None:
      raise TProtocol.TProtocolException(message='Required field registry is unset!')
    if self.data is None:
      raise TProtocol.TProtocolException(message='Required field data is unset!')
    if self.patientRegistryFILENAME is None:
      raise TProtocol.TProtocolException(message='Required field patientRegistryFILENAME is unset!')
    if self.serviceRegistryFILENAME is None:
      raise TProtocol.TProtocolException(message='Required field serviceRegistryFILENAME is unset!')
    if self.schet is None:
      raise TProtocol.TProtocolException(message='Required field schet is unset!')
    if self.PR_NOV is None:
      raise TProtocol.TProtocolException(message='Required field PR_NOV is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotFoundException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotFoundException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SQLException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SQLException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidArgumentException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidArgumentException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidOrganizationInfisException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidOrganizationInfisException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidContractException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidContractException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InvalidDateIntervalException(TException):
  """
  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I32, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.code = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InvalidDateIntervalException')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I32, 2)
      oprot.writeI32(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
